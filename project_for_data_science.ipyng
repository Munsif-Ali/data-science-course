{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "45892909",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "253b0e95",
   "metadata": {},
   "outputs": [],
   "source": [
    "tesla = yf.Ticker(\"TSLA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a46f244b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Date      Open      High       Low     Close  \\\n",
      "0 2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667   \n",
      "1 2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667   \n",
      "2 2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000   \n",
      "3 2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   \n",
      "4 2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000   \n",
      "\n",
      "      Volume  Dividends  Stock Splits  \n",
      "0  281494500        0.0           0.0  \n",
      "1  257806500        0.0           0.0  \n",
      "2  123282000        0.0           0.0  \n",
      "3   77097000        0.0           0.0  \n",
      "4  103003500        0.0           0.0  \n"
     ]
    }
   ],
   "source": [
    "tesla_data = tesla.history(period=\"max\")\n",
    "tesla_data.reset_index(inplace=True)\n",
    "tesla_data.to_csv(\"tesla_data.csv\")\n",
    "print(tesla_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9add5cef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def make_graph(data, title):\n",
    "  plt.plot(data[\"Date\"], data[\"Close\"])\n",
    "  plt.title(title)\n",
    "  plt.show()\n",
    "tesla_data = pd.read_csv(\"tesla_data.csv\")\n",
    "make_graph(tesla_data, \"Tesla Stock Price\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cd196e78",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6223d926",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\"\n",
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n",
    "table = soup.find(\"table\", class_=\"table table-striped table-bordered table-hover\")\n",
    "# rows = table.find_all(\"tr\")\n",
    "tesla_revenue = []\n",
    "# for row in rows:\n",
    "#     cells = row.find_all(\"td\")\n",
    "#     date = cells[0].text\n",
    "#     revenue = cells[1].text.replace(\",\", \"\").replace(\"$\", \"\")\n",
    "#     tesla_revenue.append([date, revenue])\n",
    "# tesla_revenue_df = pd.DataFrame(tesla_revenue, columns=[\"Date\", \"Revenue\"])\n",
    "# tesla_revenue_df.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b0f01026",
   "metadata": {},
   "outputs": [],
   "source": [
    "table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e94403dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4ebd8467",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "<!DOCTYPE html>\n",
       "\n",
       "<!--[if lt IE 7]>      <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\"> <![endif]-->\n",
       "<!--[if IE 7]>         <html class=\"no-js lt-ie9 lt-ie8\"> <![endif]-->\n",
       "<!--[if IE 8]>         <html class=\"no-js lt-ie9\"> <![endif]-->\n",
       "<!--[if gt IE 8]><!--> <html class=\"no-js\"> <!--<![endif]-->\n",
       "<head>\n",
       "<meta charset=\"utf-8\"/>\n",
       "<meta content=\"IE=edge,chrome=1\" http-equiv=\"X-UA-Compatible\"/>\n",
       "<link href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\" rel=\"canonical\"/>\n",
       "<title>Tesla Revenue 2010-2023 | TSLA | MacroTrends</title>\n",
       "<link href=\"/assets/images/icons/FAVICON/macrotrends-favicon.ico\" rel=\"icon\" type=\"image/x-icon\"/>\n",
       "<meta content=\"Tesla annual/quarterly revenue history and growth rate from 2010 to 2023. Revenue can be defined as the amount of money a company receives from its customers in exchange for the sales of goods or services.  Revenue is the top line item on an income statement from which all costs and expenses are subtracted to arrive at net income.    \n",
       "\t\t\t\t\n",
       "\t\t\t\t&lt;ul style='margin-top:10px;'&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the quarter ending March 31, 2023 was &lt;strong&gt;$23.329B&lt;/strong&gt;, a &lt;strong&gt;24.38% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the twelve months ending March 31, 2023 was &lt;strong&gt;$86.035B&lt;/strong&gt;, a &lt;strong&gt;38.34% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2022 was &lt;strong&gt;$81.462B&lt;/strong&gt;, a &lt;strong&gt;51.35% increase&lt;/strong&gt; from 2021.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2021 was &lt;strong&gt;$53.823B&lt;/strong&gt;, a &lt;strong&gt;70.67% increase&lt;/strong&gt; from 2020.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2020 was &lt;strong&gt;$31.536B&lt;/strong&gt;, a &lt;strong&gt;28.31% increase&lt;/strong&gt; from 2019.&lt;/li&gt;\n",
       "\t\t\t\t&lt;/ul&gt;\" name=\"description\">\n",
       "<meta content=\"\" name=\"robots\">\n",
       "<meta content=\"1228954C688F5907894001CD8E5E624B\" name=\"msvalidate.01\"/>\n",
       "<meta content=\"6MnD_3iDtAP1ZyoGK1YMyVIVck4r5Ws80I9xD3ue4_A\" name=\"google-site-verification\"/>\n",
       "<!-- Load in Roboto Font -->\n",
       "<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,600,700\" rel=\"stylesheet\"/>\n",
       "<!-- Bootstrap -->\n",
       "<link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\"/> <!--for Bootstrap CDN version-->\n",
       "<link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" rel=\"stylesheet\"/>\n",
       "<!-- Font Awesome -->\n",
       "<link href=\"//stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\"/> <!--for Font Awesome CDN version-->\n",
       "<!-- Jquery, Bootstrap and Menu Javascript -->\n",
       "<script crossorigin=\"anonymous\" integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\" src=\"//code.jquery.com/jquery-1.12.4.min.js\"></script>\n",
       "<script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n",
       "<!-- Modernizr for cross-browser support -->\n",
       "<script src=\"/assets/javascript/modernizr-2.6.2-respond-1.1.0.min.js\" type=\"text/javascript\"></script>\n",
       "<!-- Latest compiled and minified CSS -->\n",
       "<link href=\"//www.fuelcdn.com/fuelux/3.13.0/css/fuelux.min.css\" rel=\"stylesheet\"/>\n",
       "<!-- Latest compiled and minified JavaScript -->\n",
       "<script src=\"//www.fuelcdn.com/fuelux/3.13.0/js/fuelux.min.js\"></script>\n",
       "<!-- Twitter Card data -->\n",
       "<meta content=\"summary_large_image\" name=\"twitter:card\"/>\n",
       "<meta content=\"@tmacrotrends\" name=\"twitter:site\"/>\n",
       "<meta content=\"Tesla Revenue 2010-2023 | TSLA\" name=\"twitter:title\"/>\n",
       "<meta content=\"Tesla annual/quarterly revenue history and growth rate from 2010 to 2023. Revenue can be defined as the amount of money a company receives from its customers in exchange for the sales of goods or services.  Revenue is the top line item on an income statement from which all costs and expenses are subtracted to arrive at net income.    \n",
       "\t\t\t\t\n",
       "\t\t\t\t&lt;ul style='margin-top:10px;'&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the quarter ending March 31, 2023 was &lt;strong&gt;$23.329B&lt;/strong&gt;, a &lt;strong&gt;24.38% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the twelve months ending March 31, 2023 was &lt;strong&gt;$86.035B&lt;/strong&gt;, a &lt;strong&gt;38.34% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2022 was &lt;strong&gt;$81.462B&lt;/strong&gt;, a &lt;strong&gt;51.35% increase&lt;/strong&gt; from 2021.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2021 was &lt;strong&gt;$53.823B&lt;/strong&gt;, a &lt;strong&gt;70.67% increase&lt;/strong&gt; from 2020.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2020 was &lt;strong&gt;$31.536B&lt;/strong&gt;, a &lt;strong&gt;28.31% increase&lt;/strong&gt; from 2019.&lt;/li&gt;\n",
       "\t\t\t\t&lt;/ul&gt;\" name=\"twitter:description\"/>\n",
       "<!-- Open Graph data -->\n",
       "<meta content=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\" property=\"og:url\">\n",
       "<meta content=\"Tesla Revenue 2010-2023 | TSLA\" property=\"og:title\">\n",
       "<meta content=\"Tesla annual/quarterly revenue history and growth rate from 2010 to 2023. Revenue can be defined as the amount of money a company receives from its customers in exchange for the sales of goods or services.  Revenue is the top line item on an income statement from which all costs and expenses are subtracted to arrive at net income.    \n",
       "\t\t\t\t\n",
       "\t\t\t\t&lt;ul style='margin-top:10px;'&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the quarter ending March 31, 2023 was &lt;strong&gt;$23.329B&lt;/strong&gt;, a &lt;strong&gt;24.38% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla revenue for the twelve months ending March 31, 2023 was &lt;strong&gt;$86.035B&lt;/strong&gt;, a &lt;strong&gt;38.34% increase&lt;/strong&gt; year-over-year.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2022 was &lt;strong&gt;$81.462B&lt;/strong&gt;, a &lt;strong&gt;51.35% increase&lt;/strong&gt; from 2021.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2021 was &lt;strong&gt;$53.823B&lt;/strong&gt;, a &lt;strong&gt;70.67% increase&lt;/strong&gt; from 2020.&lt;/li&gt;\n",
       "\t\t\t\t&lt;li&gt;Tesla annual revenue for 2020 was &lt;strong&gt;$31.536B&lt;/strong&gt;, a &lt;strong&gt;28.31% increase&lt;/strong&gt; from 2019.&lt;/li&gt;\n",
       "\t\t\t\t&lt;/ul&gt;\" property=\"og:description\">\n",
       "<!-- JQXGRID STYLES AND JAVASCRIPT -->\n",
       "<link href=\"/assets/php/jqfiles/jqwidgets/styles/jqx.base.css\" rel=\"stylesheet\" type=\"text/css\">\n",
       "<link href=\"/assets/php/jqfiles/jqwidgets/styles/jqx.bootstrap.css\" rel=\"stylesheet\" type=\"text/css\">\n",
       "<!-- LOAD THESE SCRIPTS EARLY SO THE TICKER INPUT FIELD IS STYLED INSTANTLY -->\n",
       "<script src=\"/assets/php/jqfiles/jqwidgets/jqxcore.js\" type=\"text/javascript\"></script>\n",
       "<script src=\"/assets/php/jqfiles/jqwidgets/jqxdata.js\" type=\"text/javascript\"></script>\n",
       "<script src=\"/assets/php/jqfiles/jqwidgets/jqxinput.js\" type=\"text/javascript\"></script>\n",
       "<!-- Styling for search box -->\n",
       "<link href=\"/assets/php/jquery-typeahead/jquery.typeahead_pages.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
       "<!-- Search box javascript -->\n",
       "<script src=\"/assets/php/jquery-typeahead/jquery.typeahead.min.js\"></script>\n",
       "<link href=\"//cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css\" rel=\"stylesheet\">\n",
       "<script src=\"//cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js\"></script>\n",
       "<!-- ToolTips -->\n",
       "<script src=\"/assets/php/tipped-4.6.1/js/tipped/tipped.js\"></script>\n",
       "<link href=\"/assets/php/tipped-4.6.1/css/tipped/tipped.css\" rel=\"stylesheet\"/>\n",
       "<!-- START IC AD INSERT -->\n",
       "<script>InvestingChannelQueue = window.InvestingChannelQueue || [];</script>\n",
       "<script async=\"\" src=\"https://u5.investingchannel.com/static/uat.js\"></script>\n",
       "<script type=\"text/javascript\">\n",
       "    \n",
       "        //Push Run command with the API-Key, so that UAT will start processing publishers request.\n",
       "        InvestingChannelQueue.push(function() {\n",
       "            ic_page = InvestingChannel.UAT.Run(\"df17ac1e-cc7f-11e8-82a5-0abbb61c4a6a\");        \n",
       "        });\n",
       "\t\t\n",
       "\t\tvar tickerValue = 'TSLA';\t\t\t\n",
       "        var oopDivTag;\n",
       "\t\tvar subLeaderboardTag;\n",
       "\t\tvar rightSidebarTag1;\n",
       "\t\tvar rightSidebarTag2;\n",
       "\t\tvar searchButtonTag;\n",
       "\t\tvar partner_center_tag;\n",
       "\t\tvar videoTag;\n",
       "\t\tvar ic_3x7_1;\n",
       " \t\t//var IC_D_300x250_BCC;\n",
       "\t\t//var IC_D_3x7_BCC;\n",
       "   \n",
       "        //To define new tags/out of page tags.\n",
       "        InvestingChannelQueue.push(function() {\n",
       "\t\t\t\n",
       "\t\t\tic_page.setKval({'t': tickerValue});\n",
       "\t\t\t\n",
       "            //videoTag = ic_page.defineNativeTag(\"Macrotrends/fundamentalanalysis\",\"3x6, 728x90, Fluid\",\"IC_D_3x6\",35);\n",
       "\t\t\t\n",
       "            oopDivTag = ic_page.defineOutOfPageTag(\"Macrotrends/fundamentalanalysis\",\"oopDivTag_1\");\n",
       "\t\t\toopDivTag.setKval({\"adslot\":\"IC_OOP_1\"});\n",
       "            \n",
       "\t\t\t\n",
       "\t\t\t//LeaderboardTag = ic_page.defineTag(\"Macrotrends/fundamentalanalysis\",\"970x250,728x90,970x90,fluid\", \"IC_D_970x250_1\");\n",
       "\t\t\t//LeaderboardTag.setKval({\"adslot\":\"IC_D_970x250_1\"});\n",
       "\n",
       "\n",
       "\t\t\tsubLeaderboardTag = ic_page.defineTag(\"Macrotrends/fundamentalanalysis\",\"728x90\",\"ic_728x90_1\");\n",
       "\t\t\tsubLeaderboardTag.setKval({\"adslot\":\"IC_728x90_1\"});\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\t\t\trightSidebarTag1 = ic_page.defineTag(\"Macrotrends/fundamentalanalysis\",\"300x250,Fluid\",\"ic_300x250_1\");\n",
       "\t\t\trightSidebarTag1.setKval({\"adslot\":\"IC_300x250_1\"});\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\t\t\trightSidebarTag2 = ic_page.defineTag(\"Macrotrends/fundamentalanalysis\",\"300x600,300x250,160x600,300x1050,Fluid\",\"ic_300x600_1\");\n",
       "\t\t\trightSidebarTag2.setKval({\"adslot\":\"IC_300x600_1\"});\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\t\t\tsearchButtonTag = ic_page.defineTag(\"Macrotrends/fundamentalanalysis\",\"88x31\",\"ic_88x31_1\");\n",
       "\t\t\tsearchButtonTag.setKval({\"pc\":\"pc\",\"adslot\":\"IC_88x31\"});\n",
       "\t\t\t\n",
       "\t\t\tpartner_center_tag = ic_page.defineTag(\"macrotrends/fundamentalanalysis\",\"728x214, 728x90\",\"IC_728x214_1\");\n",
       "\t\t\tpartner_center_tag.setKval({\"pc\":\"pc\",\"adslot\":\"d_728x90_2\"});\n",
       "\n",
       "\t\t\tic_3x7_1 = ic_page.defineNativeTag(\"macrotrends/fundamentalanalysis\",\"3x7,728x90,Fluid\",\"IC_3x7_1\", 35);\n",
       "\t\t\t\n",
       "\t\t\t//IC_D_300x250_BCC = ic_page.defineTag(adCategory,\"300x250,Fluid\",\"IC_D_300x250_BCC\");\n",
       "\t\t\t//IC_D_300x250_BCC.setKval({\"adslot\":\"IC_D_300x250_BCC\"});\n",
       "\n",
       "\t\t\t//IC_D_3x7_BCC = ic_page.defineTag(adCategory,\"3x7, Fluid\",\"IC_D_3x7_BCC\");\n",
       "\t\t\t//IC_D_3x7_BCC.setKval({\"adslot\":\"IC_D_3x7_BCC\"});\n",
       "\t\t\t\n",
       "\n",
       "        });\n",
       "    \n",
       "        //To render tags.\n",
       "\t\t\tInvestingChannelQueue.push(function() {\n",
       "            ic_page.renderTags();\n",
       "        });\n",
       "        \n",
       "    </script>\n",
       "<!-- END IC AD INSERT -->\n",
       "<!-- Global site tag (gtag.js) - Google Analytics -->\n",
       "<script async=\"\" src=\"https://www.googletagmanager.com/gtag/js?id=UA-62099500-1\"></script>\n",
       "<script>\n",
       "\t\t  window.dataLayer = window.dataLayer || [];\n",
       "\t\t  function gtag(){dataLayer.push(arguments);}\n",
       "\t\t  gtag('js', new Date());\n",
       "\n",
       "\t\t  gtag('config', 'UA-62099500-1');\n",
       "\t\t</script>\n",
       "<!-- Google tag (gtag.js) -->\n",
       "<script async=\"\" src=\"https://www.googletagmanager.com/gtag/js?id=G-3KL0LYERBH\"></script>\n",
       "<script>\n",
       "\t\t  window.dataLayer = window.dataLayer || [];\n",
       "\t\t  function gtag(){dataLayer.push(arguments);}\n",
       "\t\t  gtag('js', new Date());\n",
       "\n",
       "\t\t  gtag('config', 'G-3KL0LYERBH');\n",
       "\t\t</script>\n",
       "<!--<script>\n",
       "\t\t\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n",
       "\t\t\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n",
       "\t\t\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n",
       "\t\t\t})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n",
       "\n",
       "\t\t\tga('create', 'UA-62099500-1', 'auto');\n",
       "\t\t\tga('send', 'pageview');\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\t\t   \n",
       "\t\t\t//Send one event to GA at 30 seconds to control bounce rate\n",
       "\t\t\tsetTimeout(\"ga('send','event','Engaged User','30 Second Engagement')\",30000); \n",
       "\n",
       "\n",
       "\t\t  //This code sends events to ga every 30 seconds when the window is in focus\n",
       "\t\t\tvar count = 0;\n",
       "\t\t\tvar myInterval;\n",
       "\t\t\t\t\t\n",
       "\t\t\t// Active\n",
       "\t\t\twindow.addEventListener('load', startTimer);\n",
       "\t\t\twindow.addEventListener('focus', startTimer);\n",
       "\n",
       "\t\t\t// Inactive\n",
       "\t\t\twindow.addEventListener('blur', stopTimer);\n",
       "\n",
       "\t\t\tfunction timerHandler() {\n",
       "\t\t\t\tcount++;\n",
       "\t\t\t\t\n",
       "\t\t\t\tif(count % 60 == 0 && count <= 1800) {\n",
       "\t\t\t\t\t\n",
       "\t\t\t\t\tvar interval = (count/60);\n",
       "\t\t\t\t\tinterval = interval.toFixed(0);\n",
       "\t\t\t\t\t\n",
       "\t\t\t\t\tvar action = interval + \" Minute Engagement\";\n",
       "\t\t\t\t\t\n",
       "\t\t\t\t\tga('send','event','Engaged User',action);\n",
       "\n",
       "\t\t\t\t\t\n",
       "\t\t\t\t}\n",
       "\t\t\t\n",
       "\t\t\t}\n",
       "\n",
       "\t\t\t// Start timer\n",
       "\t\t\tfunction startTimer() {\n",
       "\t\t\tmyInterval = window.setInterval(timerHandler, 1000);\n",
       "\t\t\t}\n",
       "\n",
       "\t\t\t// Stop timer\n",
       "\t\t\tfunction stopTimer() {\n",
       "\t\t\twindow.clearInterval(myInterval);\n",
       "\t\t\t}\n",
       "\t\t\t\n",
       "\t\t\t\n",
       "\n",
       "\t\t</script>-->\n",
       "<style> \n",
       "\n",
       "#style-1::-webkit-scrollbar-track\n",
       "{\n",
       "\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n",
       "\tborder-radius: 3px;\n",
       "\tbackground-color: #F5F5F5;\n",
       "}\n",
       "\n",
       "#style-1::-webkit-scrollbar\n",
       "{\n",
       "\twidth: 18px;\n",
       "\tbackground-color: #F5F5F5;\n",
       "}\n",
       "\n",
       "#style-1::-webkit-scrollbar-thumb\n",
       "{\n",
       "\tborder-radius: 3px;\n",
       "\t-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n",
       "\tbackground-color: #5B9BD5;\n",
       "}\n",
       "\n",
       "html {\n",
       "\twidth:100%;\n",
       "\tposition: relative;\n",
       "\tmin-height: 100%;\n",
       "}\n",
       "\n",
       "body {\n",
       "\t\n",
       "\twidth:100%;\n",
       "\n",
       "\t/* Margin bottom by footer height */\n",
       "\t  margin-bottom: 80px;\n",
       "\t  color: #444;\n",
       "\t  background-color:#fff;\n",
       "\t  font-family: 'Roboto', sans-serif;\n",
       "\t  font-size:14px;\n",
       "}\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       ".header_content_container {\n",
       "\t\n",
       "\tmin-width: 1280px;\n",
       "\tpadding: 0px;\n",
       "}\n",
       "\n",
       ".main_content_container {\n",
       "\t\n",
       "\tmin-width: 1280px;\n",
       "\tmax-width: 1280px;\n",
       "\tpadding: 0px 30px 100px 30px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".sub_main_content_container {\n",
       "\t\n",
       "\t\n",
       "}\n",
       "\n",
       "\n",
       "\n",
       "#main_content {\n",
       "\t\n",
       "\tpadding:0px 20px 0px 0px;\n",
       "\twidth:826px;\n",
       "    float:left;\n",
       "\t\n",
       "}\n",
       "\n",
       "#right_sidebar {\n",
       "\t\n",
       "  width: 300px;\n",
       "  float:left;\n",
       "  height:3170px;\n",
       "\t\n",
       "}\n",
       "\n",
       "#sticky_ad_left {\n",
       "\t\n",
       "  position: -webkit-sticky;\n",
       "  position: sticky;\n",
       "  top: 30px;\n",
       "\t\n",
       "\t\n",
       "}\n",
       "\n",
       "#sticky_ad_right {\n",
       "\t\n",
       "  position: -webkit-sticky;\n",
       "  position: sticky;\n",
       "  top: 30px;\n",
       "\t\n",
       "\t\n",
       "}\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       ".footer {\n",
       "  position: absolute;\n",
       "  bottom: 0;\n",
       "  width: 100%;\n",
       "  /* Set the fixed height of the footer here */\n",
       "  height: 100px;\n",
       "  margin-top: 10px;\t\n",
       "  padding: 30px 20px 20px 20px;\n",
       "  color:#fff !important;\n",
       "  background-color:#444;\n",
       "  text-align: center;\n",
       "  font-size:16px;\n",
       "}\n",
       "\n",
       ".footer a {\n",
       "  color:#fff !important;\n",
       "}\n",
       "\n",
       ".ticker_search_box {\n",
       "\t\n",
       "\tbackground-color:#F5F5F5;\n",
       "\tborder: 1px solid #E0E0E0;\n",
       "\tborder-bottom:none;\n",
       "\tpadding:10px 30px 10px 10px;\n",
       "\tmargin:0px 0px 0px 0px;\n",
       "\ttext-align:center;\n",
       "\t\n",
       "}\n",
       "\n",
       ".related_tickers {\n",
       "\t\n",
       "\twidth:100%;\n",
       "\tbackground-color:#F5F5F5;\n",
       "\tborder: 1px solid #E0E0E0;\n",
       "\tborder-top: 0px;\n",
       "\tpadding:3px 30px 3px 10px;\n",
       "\tmargin:0px 0px 0px 0px;\n",
       "\ttext-align:center;\n",
       "\t\n",
       "}\n",
       "\n",
       ".statement_type_select {\n",
       "\n",
       "\twidth:100%;\n",
       "\theight:28px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".frequency_select {\n",
       "\n",
       "\twidth:100%;\n",
       "\theight:28px;\n",
       "\tfont-weight:600;\n",
       "\t\n",
       "}\n",
       "\n",
       "\n",
       ".select2 {\n",
       "\t\n",
       "\ttext-align:left;\n",
       "\tfont-weight:600;\n",
       "\t\n",
       "\t}\n",
       "\t\n",
       "#jqxInput {\n",
       "\n",
       "\t\twidth:100%;\n",
       "\t\theight:28px;\n",
       "\t\t\n",
       "}\n",
       "\n",
       "\n",
       "\n",
       ".header__parent_container {\n",
       "\n",
       "\twidth:100%;\n",
       "\theight:50px;\n",
       "\tpadding:15px 0px 10px -20px; \n",
       "\tmargin:0px 0px 0px 0px;\n",
       "\tbackground-color:#444;\n",
       "\n",
       "}\n",
       "\n",
       ".header_container {\n",
       "\n",
       "\twidth:100%;\n",
       "\theight:50px;\n",
       "\tpadding:15px 0px 10px -20px; \n",
       "\tmargin:0px 0px 0px 0px;\n",
       "\tbackground-color:#444;\n",
       "\n",
       "}\n",
       "\n",
       ".header_logo {\n",
       "\t\n",
       "\tpadding-top:10px;\n",
       "\tmargin-left:50px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".menu_parent_container {\n",
       "\t\n",
       "\twidth:100%;\n",
       "\theight:34px;\n",
       "\tfont-size:16px;\n",
       "\tpadding:15px 0px 10px -20px; \n",
       "\tmargin:0px 0px 0px 0px;\n",
       "\tbackground-color:#0089de;\n",
       "}\n",
       "\n",
       ".menu_container {\n",
       "\t\n",
       "\twidth:1280px;\n",
       "\theight:34px;\n",
       "\tfont-size:16px;\n",
       "\tpadding:11px 0px 0px -20px; \n",
       "\tmargin: 0 auto;\n",
       "\tbackground-color:#0089de;\n",
       "\tz-index:1000;\n",
       "}\n",
       "\n",
       ".menu_item {\n",
       "\n",
       "\theight:34px;\n",
       "\tfloat:left;\n",
       "\tfont-size:14px;\n",
       "\tfont-weight:bold;\n",
       "\tcolor:#fff;\n",
       "\ttext-align:center;\n",
       "\tpadding:7px 16px 0px 16px;\t\n",
       "\n",
       "}\n",
       "\n",
       ".menu_item:hover\n",
       "{\n",
       "\tbackground-color:#32a0e4;\n",
       "\tcursor: pointer;\n",
       "}\n",
       "\n",
       ".menu_item a\n",
       "{\n",
       "\tcolor:#fff;\n",
       "\tcursor: pointer;\n",
       "}\n",
       "\n",
       ".menu_item a:hover\n",
       "{\n",
       "\ttext-decoration:none;\n",
       "\tcursor: pointer;\n",
       "}\n",
       "\n",
       ".leaderboard_ad {\n",
       "\n",
       "\tmargin-top:20px;\n",
       "\tmargin-bottom:20px;\n",
       "\ttext-align:center;\n",
       "\tmin-height:100px;\n",
       "\n",
       "}\n",
       "\n",
       "#filter_result_count {\n",
       "\t\n",
       "\twidth:100%;\n",
       "\ttext-align:center;\n",
       "\tfont-size:24px;\n",
       "\tfont-weight:bold;\n",
       "\tpadding:10px 15px;\n",
       "\tbackground-color:#efefef;\n",
       "\tborder: 1px solid #dfdfdf;\n",
       "\tmargin:20px;\n",
       "\t\n",
       "}\n",
       "\n",
       "\n",
       "select {\n",
       "  color: #444;\n",
       "  background-color: #FFF;\n",
       "  border: 1px solid #AAA;\n",
       "  border-radius: 4px;\n",
       "  box-sizing: border-box;\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  height:40px;\n",
       "  line-height: 40px;\n",
       "}\n",
       "\n",
       ".historical_data_table  {\n",
       "    table-layout: fixed;\n",
       "\tmargin:20px;\n",
       "}\n",
       "\n",
       ".historical_data_table tbody tr td {\n",
       "\t\n",
       "\tpadding:6px;\n",
       "\tvertical-align: middle !important;\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       ".descriptors {\n",
       "\t\n",
       "\ttext-align:center;\n",
       "\tfont-size:14px;\n",
       "\tpadding:15px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".td_metric_name {\n",
       "\t\n",
       "\twidth:110px;\n",
       "\tpadding-top:17px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".metric_link {\n",
       "\t\n",
       "\tfont-size:14px;\n",
       "\tfont-weight:bold;\n",
       "\n",
       "}\n",
       "\n",
       ".help_icon {\n",
       "\t\n",
       "\twidth:15px;\n",
       "\theight:18px; \n",
       "\tpadding-bottom:3px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".td_min_value {\n",
       "\t\n",
       "\twidth:75px;\n",
       "\ttext-align:center;\n",
       "\tfont-size:13px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".td_max_value {\n",
       "\t\n",
       "\twidth:75px;\n",
       "\ttext-align:center;\n",
       "\tfont-size:13px;\n",
       "\t\n",
       "}\n",
       "\n",
       "#myCombobox .form-control {\n",
       "\t\n",
       "\tbackground-color: #99d5ff;\n",
       "\n",
       "\t\n",
       "}\n",
       "\n",
       ".dropdown-toggle {\n",
       "\t\n",
       "\theight:24px;\n",
       "\tpadding-top:0px;\n",
       "\tpadding-left:7px;\n",
       "\twidth:24px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".dropdown-menu-right {\n",
       "\t\n",
       "\tmin-width:75px;\n",
       "\tfont-size:13px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".form-control {\n",
       "\t\n",
       "\tfont-size:12px;\t\n",
       "\tpadding:5px 10px;\n",
       "\theight:24px;\n",
       "\n",
       "\t\n",
       "}\n",
       "\n",
       "#myPills1 {\n",
       "\t\n",
       "\tmargin:0px 15px 10px 0px;\n",
       "\t\n",
       "}\n",
       "\n",
       "#jqxgrid {\n",
       "\t\n",
       "\tborder-radius:0px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".jqx-widget-header {\n",
       "\t\n",
       "    font-family: 'Roboto', sans-serif;\n",
       "\tfont-size:13px;\t\n",
       "\t\n",
       "}\n",
       "\n",
       ".jqx-item {\n",
       "\t\n",
       "    font-family: 'Roboto', sans-serif;\n",
       "\tfont-size: 13px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".jqx-widget-content {\n",
       "\t\n",
       "\tborder-color: #E0E0E0;\n",
       "\t\n",
       "}\n",
       "\n",
       "#jqxgrid .jqx-grid-cell {\n",
       "\t\n",
       "\tborder-color: #E0E0E0;\n",
       "\t\n",
       "}\n",
       "\n",
       "#jqxgrid .jqx-grid-cell-pinned {\n",
       "\t\n",
       "\tborder-color: #E0E0E0;\n",
       "\tbackground-color: #F5F5F5;\n",
       "\t\n",
       "}\n",
       "\n",
       "#jqxgrid .jqx-grid-column-header {\n",
       "\t\n",
       "\tborder-color: #E0E0E0;\n",
       "\tbackground-color: #F5F5F5;\n",
       "\t\n",
       "}\n",
       "\n",
       ".clear_zero {\n",
       "\n",
       "\theight:0px;\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       "\n",
       "/* Styles for Popup Charts */\n",
       "\n",
       ".tpd-size-large {\n",
       "\t\n",
       "\tmargin:0px;\t\n",
       "\tpadding: 0px;\n",
       "}\n",
       "\n",
       ".popup_window_wrapper {\n",
       "\t\n",
       "\tmargin:15px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".popup_stock_name {\n",
       "\n",
       "\tfont-size:16px;\n",
       "\tfont-weight:bold;\n",
       "\tmargin:5px;\n",
       "\n",
       "}\n",
       "\n",
       ".popup_stock_attributes {\n",
       "\n",
       "\tfont-size:13px;\n",
       "\tfont-weight:bold;\n",
       "\tmargin:5px;\n",
       "\n",
       "}\n",
       "\n",
       ".popup_stock_description {\n",
       "\n",
       "\tfont-size:12px;\n",
       "\tmargin:5px;\n",
       "\n",
       "}\n",
       "\n",
       ".jqx-input {\n",
       "\t\n",
       "\tfont-size:14px;\n",
       "\t\n",
       "} \n",
       "\n",
       ".jqx-menu-item {\n",
       "\t\n",
       "\tfont-size:14px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".jqx-input {\n",
       "\t\n",
       "\tpadding:5px 10px;\n",
       "\t\n",
       "}\n",
       "\n",
       ".nav-tabs {\n",
       "    border: 1px solid #E0E0E0;\n",
       "\tbackground-color:#F5F5F5;\n",
       "\tpadding: 3px 5px 0px 5px;\n",
       "\tmargin: 0px 0px 10px 0px;\n",
       "}\n",
       "\n",
       ".nav-tabs>li>a {\n",
       "\tfont-size:13px;\n",
       "\tpadding:7px 11px;\n",
       "\tfont-weight:600;\n",
       "    margin-right: 0px;\n",
       "    line-height: 1.42857143;\n",
       "    border: 0px;\n",
       "    border-radius: 0px 0px 0 0;\n",
       "\tbackground-color:#F5F5F5;\n",
       "\n",
       "}\n",
       "\n",
       ".nav-tabs>li>a .active {\n",
       "    margin-right: 0px;\n",
       "    line-height: 1.42857143;\n",
       "    border: 1px solid #E0E0E0;\n",
       "    border-radius: 0px 0px 0 0;\n",
       "\tbackground-color:#F5F5F5;\n",
       "\n",
       "}\n",
       "\n",
       ".nav-tabs>li>a:hover { \n",
       "    background-color: #F5F5F5;\n",
       "\ttext-decoration: underline;\n",
       "\n",
       "}\n",
       "\n",
       ".donate_buttons {\n",
       "\n",
       "\tmargin-left:20px;\n",
       "\t\n",
       "\t}\n",
       "\n",
       ".modal-body {\n",
       "\n",
       "\tmargin:10px 40px 20px 40px;\n",
       "\ttext-align:left;\n",
       "\tfont-size:18px;\n",
       "\n",
       "}\n",
       "\n",
       ".modal-body li {\n",
       "\n",
       "\tmargin-top:20px;\n",
       "\tfont-size:14px;\n",
       "\n",
       "}\n",
       "\n",
       "\n",
       ".modal_title {\n",
       "\n",
       "\n",
       "\ttext-align:center;\n",
       "\tmargin-bottom:30px;\n",
       "\n",
       "}\n",
       "\n",
       ".modal-body th{\n",
       "\n",
       "\tmargin-left:10px;\n",
       "\tfont-size:14px;\n",
       "}\n",
       "\n",
       ".modal-body td {\n",
       "\n",
       "\tcolor: #337ab7;\n",
       "\tmargin-left:10px;\n",
       "\tfont-size:14px;\n",
       "}\n",
       "\n",
       ".modal_button {\n",
       "\n",
       "\tmargin-top:50px;\n",
       "\ttext-align:center;\n",
       "\tfont-size:16px;\n",
       "\n",
       "}\t\n",
       "\n",
       "\n",
       "</style>\n",
       "</link></link></link></meta></meta></meta></meta></meta></head>\n",
       "<body class=\"fuelux\">\n",
       "<!--[if lt IE 7]>\n",
       "            <p class=\"browsehappy\">You are using an <strong>outdated</strong> browser. Please <a href=\"https://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>\n",
       "        <![endif]-->\n",
       "<div class=\"header_content_container container-fluid\">\n",
       "<div class=\"header_parent_container\">\n",
       "<div class=\"header_container\">\n",
       "<div class=\"header_logo col-xs-2\">\n",
       "<a class=\"logo\" href=\"https://www.macrotrends.net\" title=\"MacroTrends Home Page\"><img src=\"/assets/images/logo_bright1.png\"/></a>\n",
       "</div>\n",
       "<div class=\"col-xs-1 pull-right\" style=\"padding-top:8px; margin-right:10px; margin-left:0px; padding-left:0px;\">\n",
       "<div id=\"ic_88x31_1\">\n",
       "</div>\n",
       "</div>\n",
       "<div class=\"col-xs-5 pull-right\" style=\"padding-top:8px;\">\n",
       "<form>\n",
       "<div class=\"typeahead__container\">\n",
       "<div class=\"typeahead__field\">\n",
       "<span class=\"typeahead__query\">\n",
       "<input autocomplete=\"off\" autofocus=\"\" class=\"js-typeahead\" name=\"q\" placeholder=\"Search over 200,000 charts...\" type=\"search\"/>\n",
       "</span>\n",
       "<span class=\"typeahead__button\">\n",
       "<button type=\"submit\">\n",
       "<span class=\"typeahead__search-icon\"></span>\n",
       "</button>\n",
       "</span>\n",
       "</div>\n",
       "</div>\n",
       "</form>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<div class=\"menu_parent_container\">\n",
       "<div class=\"menu_container\">\n",
       "<a href=\"/stocks/stock-screener\"><div class=\"menu_item\">Stock Screener</div></a>\n",
       "<a href=\"/stocks/research\"><div class=\"menu_item\">Stock Research</div></a>\n",
       "<a href=\"/charts/stock-indexes\"><div class=\"menu_item\">Market Indexes</div></a>\n",
       "<a href=\"/charts/precious-metals\"><div class=\"menu_item\">Precious Metals</div></a>\n",
       "<a href=\"/charts/energy\"><div class=\"menu_item\">Energy</div></a>\n",
       "<a href=\"/charts/commodities\"><div class=\"menu_item\">Commodities</div></a>\n",
       "<a href=\"/charts/exchange-rates\"><div class=\"menu_item\">Exchange Rates</div></a>\n",
       "<a href=\"/charts/interest-rates\"><div class=\"menu_item\">Interest Rates</div></a>\n",
       "<a href=\"/charts/economy\"><div class=\"menu_item\">Economy</div></a>\n",
       "<a href=\"/countries/topic-overview\"><div class=\"menu_item\">Global Metrics</div></a>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<div class=\"main_content_container container-fluid\" id=\"main_content_container\">\n",
       "<div class=\"adx_top_ad col-xs-12\" id=\"ic_leaderboard\" style=\"margin: 20px 20px 30px 20px; min-height:265px; text-align:center;\">\n",
       "<div id=\"IC_D_970x250_1\"></div>\n",
       "<!--Smartad # 4058: Macrotrends - 970x250 Image - Placement 2-->\n",
       "<iframe height=\"250\" id=\"dianomi_leaderboard\" scrolling=\"NO\" src=\"//www.dianomi.com/smartads.epl?id=4058\" style=\"height: 250px; border: none; overflow: hidden;\" width=\"970\"></iframe>\n",
       "</div>\n",
       "<div style=\"margin:20px 20px 20px 5px;\">\n",
       "<h2 style=\"margin-left:0px; font-weight:600; color:#444;\">Tesla Revenue 2010-2023 | TSLA</h2>\n",
       "</div>\n",
       "<div class=\"sub_main_content_container\">\n",
       "<div id=\"main_content\">\n",
       "<div class=\"navigation_tabs\" style=\"margin-bottom:20px;\">\n",
       "<ul class=\"nav nav-tabs\" id=\"myTabs\" style=\"font-size:15px;\">\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/stock-price-history\">Prices</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/financial-statements\">Financials</a></li>\n",
       "<li class=\"active\"><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\">Revenue &amp; Profit</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/total-assets\">Assets &amp; Liabilities</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/profit-margins\">Margins</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/pe-ratio\">Price Ratios</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/current-ratio\">Other Ratios</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/dividend-yield-history\">Other Metrics</a></li>\n",
       "</ul>\n",
       "<ul class=\"nav nav-tabs\" id=\"myTabs\" style=\"font-size:15px;\">\n",
       "<li class=\"active\"><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\">Revenue</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/gross-profit\">Gross Profit</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/operating-income\">Operating Income</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/ebitda\">EBITDA</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/net-income\">Net Income</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/eps-earnings-per-share-diluted\">EPS</a></li>\n",
       "<li><a href=\"https://www.macrotrends.net/stocks/charts/TSLA/tesla/shares-outstanding\">Shares Outstanding</a></li>\n",
       "</ul>\n",
       "</div>\n",
       "<div style=\"background-color:#fff; margin: 0px 0px 20px 0px; padding:20px 30px; border:1px solid #dfdfdf;\">\n",
       "<span style=\"color:#444; line-height: 1.8;\">Tesla annual/quarterly revenue history and growth rate from 2010 to 2023. Revenue can be defined as the amount of money a company receives from its customers in exchange for the sales of goods or services.  Revenue is the top line item on an income statement from which all costs and expenses are subtracted to arrive at net income.    \n",
       "\t\t\t\t\n",
       "\t\t\t\t<ul style=\"margin-top:10px;\">\n",
       "<li>Tesla revenue for the quarter ending March 31, 2023 was <strong>$23.329B</strong>, a <strong>24.38% increase</strong> year-over-year.</li>\n",
       "<li>Tesla revenue for the twelve months ending March 31, 2023 was <strong>$86.035B</strong>, a <strong>38.34% increase</strong> year-over-year.</li>\n",
       "<li>Tesla annual revenue for 2022 was <strong>$81.462B</strong>, a <strong>51.35% increase</strong> from 2021.</li>\n",
       "<li>Tesla annual revenue for 2021 was <strong>$53.823B</strong>, a <strong>70.67% increase</strong> from 2020.</li>\n",
       "<li>Tesla annual revenue for 2020 was <strong>$31.536B</strong>, a <strong>28.31% increase</strong> from 2019.</li>\n",
       "</ul></span>\n",
       "</div>\n",
       "<div style=\"background-color:#fff; margin: 30px 0px 30px 0px; text-align:center; min-height:150px;\">\n",
       "<iframe height=\"50\" id=\"dianomi_leaderboard\" scrolling=\"NO\" src=\"//www.dianomi.com/smartads.epl?id=6341\" style=\"border: none; overflow: hidden;\" width=\"728\"></iframe>\n",
       "<div id=\"ic_728x90_1\" style=\"margin:20px 20px 10px 20px;\">\n",
       "</div>\n",
       "</div>\n",
       "<div class=\"ticker_search_box\" style=\"text-align:center;\">\n",
       "<div style=\"width:400px; margin-left:20px; border-bottom:none;\">\n",
       "<script type=\"text/javascript\">\n",
       "            $(document).ready(function () {\n",
       "\t\t\t\t                \n",
       "\t\t\t\t\tvar url = \"https://www.macrotrends.net/assets/php/ticker_search_list.php\";\n",
       "\t\t\t\t\n",
       "                // prepare the data\n",
       "                var source =\n",
       "                {\n",
       "                    datatype: \"json\",\n",
       "                    datafields: [\n",
       "                        { name: 'n' },\n",
       "\t\t\t\t\t\t{ name: 's'}\n",
       "                    ],\n",
       "                    url: url\n",
       "                };\n",
       "                var dataAdapter = new $.jqx.dataAdapter(source);\n",
       "                // Create a jqxInput\n",
       "                $(\"#jqxInput\").jqxInput({ source: dataAdapter, minLength: 1, placeHolder: \"Search for ticker or company name...\", items: 20, searchMode: 'containsignorecase', displayMember: \"n\", valueMember: \"s\", width: '100%', height: 22, theme: 'bootstrap'});\n",
       "                $(\"#jqxInput\").on('select', function (event) {\n",
       "                    if (event.args) {\n",
       "                        var item = event.args.item;\n",
       "\t\t\t\t\t\t\n",
       "\t\t\t\t\t\t//Have to split the ticker and slug back out since jqxinput only seems to allow one data value\n",
       "\t\t\t\t\t\tvar itemArray = item.value.split(\"\\/\"); \n",
       "\t\t\t\t\t\tvar ticker = itemArray[0];\n",
       "\t\t\t\t\t\tvar slug = itemArray[1];\n",
       "                        if (item) {\n",
       "\t\t\t\t\t\t\t\n",
       "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n",
       "\t\t\t\t\t\t\t\twindow.location = \"https://www.macrotrends.net/stocks/charts/\" + ticker + \"/\" + slug + \"/revenue\";\n",
       "\t\t\t\t\t\t\t\n",
       "\t\t\t\t\t\t\t                        }\n",
       "                    }\n",
       "                });\n",
       "            });\n",
       "        </script>\n",
       "<input autocomplete=\"off\" id=\"jqxInput\">\n",
       "</input></div>\n",
       "<div style=\"width:280px; margin-top: -32px; margin-left:80px; border-bottom:none; float:right;\">\n",
       "<button class=\"chart_buttons btn btn-success btn-sm\" id=\"compareStocks\" style=\"margin-right:15px;\"><span class=\"glyphicon glyphicon-stats\"></span>  <strong>Compare TSLA With Other Stocks</strong></button>  \n",
       "\n",
       "</div>\n",
       "</div>\n",
       "<div style=\"height:690px; background-color:#fff; border:1px solid #dfdfdf;\">\n",
       "<iframe frameborder=\"0\" height=\"680\" hspace=\"0\" id=\"chart_iframe\" margin=\"0px\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"NO\" src=\"https://www.macrotrends.net/assets/php/fundamental_iframe.php?t=TSLA&amp;type=revenue&amp;statement=income-statement&amp;freq=Q\" title=\"Interactive chart: Tesla Revenue 2010-2023 | TSLA\" valign=\"middle\" vspace=\"0\" width=\"800\"></iframe>\n",
       "</div>\n",
       "<div id=\"ic_video_ad\" style=\"height:317px; margin:30px;\">\n",
       "<div id=\"IC_D_3x6\"></div>\n",
       "</div>\n",
       "<div style=\"background-color:#fff; margin: 30px 0px; padding:10px 30px; border:1px solid #dfdfdf;\">\n",
       "<iframe frameborder=\"0\" height=\"300\" hspace=\"0\" id=\"dianomi_below_chart\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"NO\" src=\"//www.dianomi.com/smartads.epl?id=4057\" valign=\"middle\" vspace=\"0\" width=\"100%\"></iframe>\n",
       "<!--<div id=\"IC_D_3x7_BCC\"></div>-->\n",
       "</div>\n",
       "<div id=\"style-1\" style=\"background-color:#fff; height:510px; overflow:auto; margin: 30px 0px 30px 0px; padding:0px 30px 20px 0px; border:1px solid #dfdfdf;\">\n",
       "<div class=\"col-xs-6\">\n",
       "<table class=\"historical_data_table table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th colspan=\"2\" style=\"text-align:center\">Tesla Annual Revenue<br/><span style=\"font-size:14px;\">(Millions of US $)</span></th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2022</td>\n",
       "<td style=\"text-align:center\">$81,462</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2021</td>\n",
       "<td style=\"text-align:center\">$53,823</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2020</td>\n",
       "<td style=\"text-align:center\">$31,536</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2019</td>\n",
       "<td style=\"text-align:center\">$24,578</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2018</td>\n",
       "<td style=\"text-align:center\">$21,461</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2017</td>\n",
       "<td style=\"text-align:center\">$11,759</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2016</td>\n",
       "<td style=\"text-align:center\">$7,000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2015</td>\n",
       "<td style=\"text-align:center\">$4,046</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2014</td>\n",
       "<td style=\"text-align:center\">$3,198</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2013</td>\n",
       "<td style=\"text-align:center\">$2,013</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2012</td>\n",
       "<td style=\"text-align:center\">$413</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2011</td>\n",
       "<td style=\"text-align:center\">$204</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2010</td>\n",
       "<td style=\"text-align:center\">$117</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2009</td>\n",
       "<td style=\"text-align:center\">$112</td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</div>\n",
       "<div class=\"col-xs-6\">\n",
       "<table class=\"historical_data_table table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th colspan=\"2\" style=\"text-align:center\">Tesla Quarterly Revenue<br/><span style=\"font-size:14px;\">(Millions of US $)</span></th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2023-03-31</td>\n",
       "<td style=\"text-align:center\">$23,329</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2022-12-31</td>\n",
       "<td style=\"text-align:center\">$24,318</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2022-09-30</td>\n",
       "<td style=\"text-align:center\">$21,454</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2022-06-30</td>\n",
       "<td style=\"text-align:center\">$16,934</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2022-03-31</td>\n",
       "<td style=\"text-align:center\">$18,756</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2021-12-31</td>\n",
       "<td style=\"text-align:center\">$17,719</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2021-09-30</td>\n",
       "<td style=\"text-align:center\">$13,757</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2021-06-30</td>\n",
       "<td style=\"text-align:center\">$11,958</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2021-03-31</td>\n",
       "<td style=\"text-align:center\">$10,389</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2020-12-31</td>\n",
       "<td style=\"text-align:center\">$10,744</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2020-09-30</td>\n",
       "<td style=\"text-align:center\">$8,771</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2020-06-30</td>\n",
       "<td style=\"text-align:center\">$6,036</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2020-03-31</td>\n",
       "<td style=\"text-align:center\">$5,985</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2019-12-31</td>\n",
       "<td style=\"text-align:center\">$7,384</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2019-09-30</td>\n",
       "<td style=\"text-align:center\">$6,303</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2019-06-30</td>\n",
       "<td style=\"text-align:center\">$6,350</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2019-03-31</td>\n",
       "<td style=\"text-align:center\">$4,541</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2018-12-31</td>\n",
       "<td style=\"text-align:center\">$7,226</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2018-09-30</td>\n",
       "<td style=\"text-align:center\">$6,824</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2018-06-30</td>\n",
       "<td style=\"text-align:center\">$4,002</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2018-03-31</td>\n",
       "<td style=\"text-align:center\">$3,409</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2017-12-31</td>\n",
       "<td style=\"text-align:center\">$3,288</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2017-09-30</td>\n",
       "<td style=\"text-align:center\">$2,985</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2017-06-30</td>\n",
       "<td style=\"text-align:center\">$2,790</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2017-03-31</td>\n",
       "<td style=\"text-align:center\">$2,696</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2016-12-31</td>\n",
       "<td style=\"text-align:center\">$2,285</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2016-09-30</td>\n",
       "<td style=\"text-align:center\">$2,298</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2016-06-30</td>\n",
       "<td style=\"text-align:center\">$1,270</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2016-03-31</td>\n",
       "<td style=\"text-align:center\">$1,147</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2015-12-31</td>\n",
       "<td style=\"text-align:center\">$1,214</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2015-09-30</td>\n",
       "<td style=\"text-align:center\">$937</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2015-06-30</td>\n",
       "<td style=\"text-align:center\">$955</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2015-03-31</td>\n",
       "<td style=\"text-align:center\">$940</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2014-12-31</td>\n",
       "<td style=\"text-align:center\">$957</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2014-09-30</td>\n",
       "<td style=\"text-align:center\">$852</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2014-06-30</td>\n",
       "<td style=\"text-align:center\">$769</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2014-03-31</td>\n",
       "<td style=\"text-align:center\">$621</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2013-12-31</td>\n",
       "<td style=\"text-align:center\">$615</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2013-09-30</td>\n",
       "<td style=\"text-align:center\">$431</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2013-06-30</td>\n",
       "<td style=\"text-align:center\">$405</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2013-03-31</td>\n",
       "<td style=\"text-align:center\">$562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2012-12-31</td>\n",
       "<td style=\"text-align:center\">$306</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2012-09-30</td>\n",
       "<td style=\"text-align:center\">$50</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2012-06-30</td>\n",
       "<td style=\"text-align:center\">$27</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2012-03-31</td>\n",
       "<td style=\"text-align:center\">$30</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2011-12-31</td>\n",
       "<td style=\"text-align:center\">$39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2011-09-30</td>\n",
       "<td style=\"text-align:center\">$58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2011-06-30</td>\n",
       "<td style=\"text-align:center\">$58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2011-03-31</td>\n",
       "<td style=\"text-align:center\">$49</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2010-12-31</td>\n",
       "<td style=\"text-align:center\">$36</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2010-09-30</td>\n",
       "<td style=\"text-align:center\">$31</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2010-06-30</td>\n",
       "<td style=\"text-align:center\">$28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2010-03-31</td>\n",
       "<td style=\"text-align:center\">$21</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2009-12-31</td>\n",
       "<td style=\"text-align:center\"></td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2009-09-30</td>\n",
       "<td style=\"text-align:center\">$46</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:center\">2009-06-30</td>\n",
       "<td style=\"text-align:center\">$27</td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</div>\n",
       "</div>\n",
       "<div style=\"background-color:#fff; margin: 0px 0px 20px 0px; padding:5px 50px 5px 10px; border:1px solid #dfdfdf;\">\n",
       "<table class=\"historical_data_table table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th style=\"text-align:center\">Sector</th>\n",
       "<th style=\"text-align:center\">Industry</th>\n",
       "<th style=\"text-align:center\">Market Cap</th>\n",
       "<th style=\"text-align:center\">Revenue</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td style=\"text-align:center\"><a href=\"https://www.macrotrends.net/stocks/sector/5/auto-tires-trucks\">Auto/Tires/Trucks</a></td>\n",
       "<td style=\"text-align:center\"><a href=\"https://www.macrotrends.net/stocks/industry/7/\">Auto Manufacturers - Domestic</a></td>\n",
       "<td style=\"text-align:center\">$527.786B</td>\n",
       "<td style=\"text-align:center\">$81.462B</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td colspan=\"4\" style=\"padding:15px;\">\n",
       "<span>Tesla is the market leader in battery-powered electric car sales in the United States, with roughly 70% market share. The company's flagship Model 3 is the best-selling EV model in the United States. Tesla, which has managed to garner the reputation of a gold standard over the years, is now a far bigger entity that what it started off since its IPO in 2010, with its market cap crossing $1 trillion for the first time in October 2021.? The EV king's market capitalization is more than the combined value of legacy automakers including Toyota, Volkswagen, Daimler, General Motors and Ford.Over the years, Tesla has shifted from developing niche products for affluent buyers to making more affordable EVs for the masses. The firm's three-pronged business model approach of direct sales, servicing, and charging its EVs sets it apart from other carmakers. Tesla, which is touted as the clean energy revolutionary automaker, is much more than just a car manufacturer.</span>\n",
       "</td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</div>\n",
       "<div style=\"background-color:#fff; margin: 20px 0px 30px 0px; padding:5px 50px 5px 10px; border:1px solid #dfdfdf;\">\n",
       "<table class=\"historical_data_table table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th style=\"text-align:center; width:40%;\">Stock Name</th>\n",
       "<th style=\"text-align:center; width:20%;\">Country</th>\n",
       "<th style=\"text-align:center; width:20%;\">Market Cap</th>\n",
       "<th style=\"text-align:center; width:20%;\">PE Ratio</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/F/ford-motor/revenue\">Ford Motor (F)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$45.009B</td>\n",
       "<td style=\"text-align:center\">5.31</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/GM/general-motors/revenue\">General Motors (GM)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$43.845B</td>\n",
       "<td style=\"text-align:center\">4.09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/PII/polaris/revenue\">Polaris (PII)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$5.848B</td>\n",
       "<td style=\"text-align:center\">9.19</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/HOG/harley-davidson/revenue\">Harley-Davidson (HOG)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$4.557B</td>\n",
       "<td style=\"text-align:center\">5.70</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/FSR/fisker/revenue\">Fisker (FSR)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$1.952B</td>\n",
       "<td style=\"text-align:center\">0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/LVWR/livewire/revenue\">LiveWire (LVWR)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$1.480B</td>\n",
       "<td style=\"text-align:center\">0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/LEV/lion-electric/revenue\">Lion Electric (LEV)</a></td>\n",
       "<td style=\"text-align:center\">Canada</td>\n",
       "<td style=\"text-align:center\">$0.447B</td>\n",
       "<td style=\"text-align:center\">0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/BRDS/bird-global/revenue\">Bird Global (BRDS)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$0.038B</td>\n",
       "<td style=\"text-align:center\">0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td style=\"text-align:left\"><a href=\"/stocks/charts/ZEV/lightning-emotors/revenue\">Lightning EMotors (ZEV)</a></td>\n",
       "<td style=\"text-align:center\">United States</td>\n",
       "<td style=\"text-align:center\">$0.024B</td>\n",
       "<td style=\"text-align:center\">0.00</td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "</div>\n",
       "<div>\n",
       "<!-- Partner Center Ad Unit -->\n",
       "<div id=\"IC_728x214_1\" style=\"width:728px; height:214px; margin-left:30px;\">\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<div \"=\"\" id=\"right_sidebar\">\n",
       "<!--<a href=\"/stocks/stock-screener\" style=\"text-decoration:none; color: #fff; \">\n",
       "\t\t\t\t\t<div style=\"margin:0px; padding: 20px; width:300px; background-color: #01579b; min-height:150px; text-align:center;\">\n",
       "\n",
       "\t\t\t\t\t\t<h2 style=\"font-weight:600;\">Try our new<br />stock screener!</h2></a>\n",
       "\n",
       "\t\t\t\t\t</div>\n",
       "\t\t\t\t</a>-->\n",
       "<!--<div style=\"margin-top:0px; min-height:250px;\">\n",
       "\n",
       "\t\t\t\t\t<script src='//ads.investingchannel.com/adtags/Macrotrends/fundamentalanalysis/300x600.js?zhpos=300_2&multi_size=false' type='text/javascript' charset='utf-8'></script>\n",
       "\n",
       "\t\t\t\t</div>-->\n",
       "<div style=\"margin-top:0px; min-height:250px;\">\n",
       "<div id=\"ic_300x250_1\">\n",
       "</div>\n",
       "</div>\n",
       "<div id=\"sticky_ad_right\" style=\"margin-top:30px; height:1000px;\">\n",
       "<script id=\"dianomi_context_script\" src=\"https://www.dianomi.com/js/contextfeed.js\" type=\"text/javascript\"></script>\n",
       "<div class=\"dianomi_context\" data-dianomi-context-id=\"743\"></div>\n",
       "<!-- <div id=\"IC_D_300x250_BCC\"></div>-->\n",
       "<!--Smartad # 2981: Macrotrends - 300x670 Right Rail-->\n",
       "<iframe height=\"670\" id=\"dianomi_sidebar\" scrolling=\"NO\" src=\"//www.dianomi.com/smartads.epl?id=4059\" style=\"width: 300px; border: none; overflow: hidden;\" width=\"300\"></iframe>\n",
       "<div id=\"IC_D_300x250_BCC\"></div>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<!--This is the div for the IC OOP ad-->\n",
       "<div id=\"oopDivTag_1\" style=\"width:1px;height:1px;\"></div>\n",
       "<footer class=\"footer\">\n",
       "<span>© 2010-2023 Macrotrends LLC</span>  |  \n",
       "\t\t  <a href=\"/terms\">Terms of Service</a>\n",
       "\t\t    |  \n",
       "\t\t  <a href=\"/privacy\">Privacy Policy</a>  |  \n",
       "\t\t  <a href=\"mailto:%69n%66o@%6Dac%72otrends%2En%65t\">Contact Us</a>  |  \n",
       "\t\t  <a href=\"/ccpa\">Do Not Sell My Personal Information</a>\n",
       "<br/>\n",
       "<span>Fundamental data from </span><a href=\"https://www.zacksdata.com\" rel=\"nofollow\" target=\"_blank\">Zacks Investment Research, Inc.</a>\n",
       "</footer>\n",
       "<div aria-hidden=\"true\" aria-labelledby=\"exampleModalLabel\" class=\"modal\" id=\"smallWidthModal1\" role=\"dialog\" tabindex=\"-1\">\n",
       "<div class=\"modal-dialog modal-lg\">\n",
       "<div class=\"modal-content\">\n",
       "<div class=\"modal-body\">\n",
       "<div class=\"modal_title\"><h2><strong>We Need Your Support!</strong></h2></div>\n",
       "<p>Backlinks from other websites are the lifeblood of our site and a primary source of new traffic.<p>\n",
       "<p>If you use our chart images on your site or blog, we ask that you provide attribution via a \"dofollow\" link back to this page.  We have provided a few examples below that you can copy and paste to your site:</p>\n",
       "<br/>\n",
       "<table class=\"table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th>Link Preview</th>\n",
       "<th>HTML Code (Click to Copy)</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td><a>Tesla Revenue 2010-2023 | TSLA</a></td>\n",
       "<td><input class=\"modal_link\" size=\"60\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Tesla Revenue 2010-2023 | TSLA&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td><a>Macrotrends</a></td>\n",
       "<td><input class=\"modal_link\" size=\"60\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Macrotrends&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td><a>Source</a></td>\n",
       "<td><input class=\"modal_link\" size=\"60\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Source&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "<br/>\n",
       "<p style=\"text-align:center\">Your image export is now complete.  Please check your download folder. </p>\n",
       "</p></p></div>\n",
       "<div class=\"modal-footer\">\n",
       "<button class=\"btn btn-primary\" data-dismiss=\"modal\" type=\"button\">Close Window</button>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<div aria-hidden=\"true\" aria-labelledby=\"exampleModalLabel\" class=\"modal\" id=\"smallWidthModal2\" role=\"dialog\" tabindex=\"-1\">\n",
       "<div class=\"modal-dialog modal-lg\">\n",
       "<div class=\"modal-content\">\n",
       "<div class=\"modal-body\">\n",
       "<div class=\"modal_title\"><h2><strong>We Need Your Support!</strong></h2></div>\n",
       "<p>Backlinks from other websites are the lifeblood of our site and a primary source of new traffic.<p>\n",
       "<p>If you use our datasets on your site or blog, we ask that you provide attribution via a \"dofollow\" link back to this page.  We have provided a few examples below that you can copy and paste to your site:</p>\n",
       "<br/>\n",
       "<table class=\"table\">\n",
       "<thead>\n",
       "<tr>\n",
       "<th>Link Preview</th>\n",
       "<th>HTML Code (Click to Copy)</th>\n",
       "</tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr>\n",
       "<td><a>Tesla Revenue 2010-2023 | TSLA</a></td>\n",
       "<td><input class=\"modal_link\" size=\"50\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Tesla Revenue 2010-2023 | TSLA&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td><a>Macrotrends</a></td>\n",
       "<td><input class=\"modal_link\" size=\"50\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Macrotrends&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "<tr>\n",
       "<td><a>Source</a></td>\n",
       "<td><input class=\"modal_link\" size=\"50\" type=\"text\" value=\"&lt;a href='https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'&gt;Source&lt;/a&gt;\"/></td>\n",
       "</tr>\n",
       "</tbody>\n",
       "</table>\n",
       "<br/>\n",
       "<p style=\"text-align:center\">Your data export is now complete.  Please check your download folder. </p>\n",
       "</p></p></div>\n",
       "<div class=\"modal-footer\">\n",
       "<button class=\"btn btn-primary\" data-dismiss=\"modal\" type=\"button\">Close Window</button>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "</div>\n",
       "<script type=\"text/javascript\">\n",
       "\t$.typeahead({\n",
       "\t\tinput: '.js-typeahead',\n",
       "\t\tminLength: 1,\n",
       "\t\tfilter: false,  //Disables typahead filter to just show everything in the results from the database\n",
       "\t\tdebug: false,\n",
       "\t\thighlight: true,\n",
       "\t\tmaxItem: 10,\n",
       "\t\tdynamic: true,\n",
       "\t\tdelay: 200,\n",
       "\t\tsearchOnFocus: true,\n",
       "\t\tbackdrop: {\n",
       "\t\t\t\"background-color\": \"#fff\"\n",
       "\t\t},\n",
       "\t\thref: \"{{url}}\",\n",
       "\t\temptyTemplate: \"no result for {{query}}\",\n",
       "\t\tdisplay: [\"name\"],\n",
       "\t\tsource: {\n",
       "\t\t\tusers: {\n",
       "\t\t\t\tajax: {\n",
       "\t\t\t\t\turl: '/assets/php/all_pages_query.php',\n",
       "\t\t\t\t\tdata: {\n",
       "\t\t\t\t\t\tq: '{{query}}'\n",
       "\t\t\t\t\t}\n",
       "\t\t\t\t}\n",
       "\t\t\t}\n",
       "\t\t}\n",
       "\t});\n",
       "</script>\n",
       "<script>\n",
       "\n",
       "\t// /*! js-cookie v3.0.0-rc.1 | MIT */\n",
       "\t// !function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=e||self,function(){var n=e.Cookies,r=e.Cookies=t();r.noConflict=function(){return e.Cookies=n,r}}())}(this,function(){\"use strict\";function e(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}var t={read:function(e){return e.replace(/(%[\\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}};return function n(r,o){function i(t,n,i){if(\"undefined\"!=typeof document){\"number\"==typeof(i=e({},o,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape),n=r.write(n,t);var c=\"\";for(var u in i)i[u]&&(c+=\"; \"+u,!0!==i[u]&&(c+=\"=\"+i[u].split(\";\")[0]));return document.cookie=t+\"=\"+n+c}}return Object.create({set:i,get:function(e){if(\"undefined\"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split(\"; \"):[],o={},i=0;i<n.length;i++){var c=n[i].split(\"=\"),u=c.slice(1).join(\"=\");'\"'===u[0]&&(u=u.slice(1,-1));try{var f=t.read(c[0]);if(o[f]=r.read(u,f),e===f)break}catch(e){}}return e?o[e]:o}},remove:function(t,n){i(t,\"\",e({},n,{expires:-1}))},withAttributes:function(t){return n(this.converter,e({},this.attributes,t))},withConverter:function(t){return n(e({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(o)},converter:{value:Object.freeze(r)}})}(t,{path:\"/\"})});\n",
       "\n",
       "\t\t\t\n",
       "\t// // Cookie Settings\n",
       "\t// var maxCookieValue = 4, initCookie = 1, expirationDays = 1;\n",
       "\t// var cookieName = \"session_pageviews\";\n",
       "\t// var getCookie = Cookies.get(cookieName);\n",
       "\n",
       "\t// // Under the Hood\n",
       "\t// if (getCookie == null) {\n",
       "\t\t// Cookies.set(cookieName, initCookie, { expires: expirationDays });\n",
       "\t\t// console.log('Cookie set to value 1');\n",
       "\t\t// $( \"#ic_video_ad\" ).append( \"<div id=\\\"IC_D_3x6\\\" style=\\\"margin:30px;\\\"></div>\" );\n",
       "\t// } else {\n",
       "\t\t// if (getCookie >= initCookie && getCookie < maxCookieValue) {\n",
       "\t\t\t// getCookie++;\n",
       "\t\t\t// Cookies.set(cookieName, getCookie, { expires: expirationDays });\n",
       "\t\t\t// console.log('Cookie incremented. New value is ' + getCookie);\n",
       "\t\t\t// $( \"#ic_video_ad\" ).append( \"<div id=\\\"IC_D_3x6\\\" style=\\\"margin:30px;\\\"></div>\" );\n",
       "\t\t// }\n",
       "\t\t// else if (getCookie >= maxCookieValue && getCookie < 7) {\n",
       "\t\t\t// getCookie++;\n",
       "\t\t\t// Cookies.set(cookieName, getCookie, { expires: expirationDays });\n",
       "\t\t\t// console.log('Cookie max allowed value reached. No video ads showing. New value is ' + getCookie);\n",
       "\t\t\t// //Cookies.remove(cookieName);\n",
       "\t\t\t// // if cookie is equal with the number you've set, then do something\n",
       "\t\t\t// // hide an element, delete the cookie etc...\n",
       "\t\t// }\n",
       "\t\t// else if (getCookie >= 7) {\n",
       "\t\t\t// Cookies.remove(cookieName);\n",
       "\t\t\t// // if cookie is equal with the number you've set, then do something\n",
       "\t\t\t// // hide an element, delete the cookie etc...\n",
       "\t\t// }\t\n",
       "\t// }\n",
       "\n",
       "</script>\n",
       "<script>\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\t\t\n",
       "\n",
       "$(document).ready(function() {\n",
       "\t\n",
       "\tvar user_data = '72.14.201.85';\tvar country_code = 'United States';\n",
       "\t$.post('https://www.macrotrends.net/assets/php/user_frequency_tracking.php', {user_ip: user_data, user_country: country_code}); \n",
       "\n",
       "\t// Selects all of the text in the chart export window when clicked\n",
       "\t$(\".modal_link\").focus(function() {\n",
       "\t\tvar $this = $(this);\n",
       "\t\t$this.select();\n",
       "\n",
       "\t\t// Work around Chrome's little problem\n",
       "\t\t$this.mouseup(function() {\n",
       "\t\t\t// Prevent further mouseup intervention\n",
       "\t\t\t$this.unbind(\"mouseup\");\n",
       "\t\t\treturn false;\n",
       "\t\t});\n",
       "\t});\t\n",
       "\t\n",
       "\t\n",
       "\t$('[data-toggle=\"tooltip\"]').tooltip();\n",
       "\t\n",
       "    $('.statement_type_select').select2({\n",
       "\t\n",
       "\ttheme: \"classic\",\n",
       "\tminimumResultsForSearch: 20\n",
       "\t\n",
       "\t});\n",
       "\n",
       "    $('.frequency_select').select2({\n",
       "\t\n",
       "\ttheme: \"classic\",\n",
       "\tminimumResultsForSearch: 20\n",
       "\t\n",
       "\t});\n",
       "\t\n",
       "\t\n",
       "});\n",
       "\n",
       "$( \"#compareStocks\" ).click(function() {\n",
       "\t\n",
       "\t\n",
       "\twindow.location.href = '/stocks/stock-comparison?s=revenue&axis=single&comp=TSLA';\n",
       "\t\n",
       "\t\n",
       "});\n",
       "\n",
       "$( \"#chartExport\" ).click(function() {\n",
       "\t\n",
       "\t\twindow.$('#smallWidthModal1').modal();\n",
       "\n",
       "\t\t//Turn off scroll bar for image export\n",
       "\t\tchart.chartScrollbarSettings.enabled = false;\n",
       "\t\tchart.validateNow(); \n",
       "\t\t\n",
       "\t\t\n",
       "\t\tchart.export.capture({},function() {\n",
       "\t\t\tthis.toPNG({},function(data) {\n",
       "\t\t\t\t// Download the image to the browser\n",
       "\t\t\t\tthis.download( data, \"image/png\", \"TSLA-revenue-2023-05-18-macrotrends.png\" );\n",
       "\t\t\t\t\n",
       "\t\t\t\t});\n",
       "\n",
       "\t\t//Turn scroll bar back on again\n",
       "\t\tchart.chartScrollbarSettings.enabled = true;\n",
       "\t\tchart.validateNow(); \n",
       "\t\t\t\t\n",
       "\t});\n",
       "\n",
       "});\n",
       "\n",
       "$( \".statement_type_select\" ).change(function() {\n",
       "  \n",
       "  window.location.href = 'https://testing.macrotrends.net/assets/php/income_statement_testing.php?t=ZEV&type=' + this.value + '&freq=Q';\n",
       "\n",
       "});\n",
       "\n",
       "$( \".frequency_select\" ).change(function() {\n",
       "  \n",
       "  window.location.href = '/assets/php/new_chart_page.php?t=ZEV&type=revenue&freq=' + this.value;\n",
       "\n",
       "});\n",
       "\n",
       "</script>\n",
       "<!--<div class=\"modal\" id=\"contribute_modal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"false\">\n",
       "  <div class=\"modal-dialog modal-lg\">\n",
       "    <div class=\"modal-content\">\n",
       "      <div class=\"modal-body\" style=\"margin:20px 40px 20px 40px; text-align:left;font-size:18px;\">\n",
       "\t  \t  \n",
       "\n",
       "\n",
       "<div class=\"row\">\n",
       "\n",
       "<div class=\"col-xs-6\">\n",
       "\n",
       "<script src=\"https://donorbox.org/widget.js\" paypalExpress=\"true\"></script><iframe src=\"https://donorbox.org/embed/macrotrends-donations?hide_donation_meter=true\" height=\"685px\" width=\"100%\" style=\"max-width:500px; min-width:310px; max-height:none!important\" seamless=\"seamless\" name=\"donorbox\" frameborder=\"0\" scrolling=\"no\" allowpaymentrequest></iframe>\n",
       "\n",
       "</div>\n",
       "\n",
       "<div class=\"col-xs-6\">\n",
       "\n",
       "\t\t<div class=\"modal_title\"><h1><strong>We Need Your Support!</strong></h1></div>\n",
       "\n",
       "\t\t<p><strong>Macrotrends has been subscription-free since 2010 and we want to keep it that way.</strong></p>\n",
       "\n",
       "<p>Our goal has always been to serve as an easily accessible, high quality source of investment research for both professionals and amateurs alike.</p>\n",
       "\n",
       "<p>Any amount that you can contribute will help ensure we can keep the site completely free for many years to come.</p>\n",
       "\n",
       "<p style=\"margin-top:20px;\">Regards,</p>\n",
       "<p>The Macrotrends Team</p>\n",
       "\n",
       "</div>\n",
       "\n",
       "</div>\n",
       "\n",
       "</div>\n",
       "\n",
       "      <div class=\"modal-footer\" style=\"text-align:center;\">\n",
       "        <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\">Maybe Next Time...</button>\n",
       "      </div>\n",
       "    </div>\n",
       "  </div>\n",
       "</div>\t\n",
       "\n",
       "\n",
       "<script src=\"/ads.js\" type=\"text/javascript\"></script>\n",
       "\n",
       "<script>\n",
       "\n",
       "$(document).ready(function() {\n",
       "\t\n",
       "\tvar botPattern = \"(googlebot\\/|Googlebot-Mobile|Googlebot-Image|Google favicon|Mediapartners-Google|bingbot|slurp|java|wget|curl|Commons-HttpClient|Python-urllib|libwww|httpunit|nutch|phpcrawl|msnbot|jyxobot|FAST-WebCrawler|FAST Enterprise Crawler|biglotron|teoma|convera|seekbot|gigablast|exabot|ngbot|ia_archiver|GingerCrawler|webmon |httrack|webcrawler|grub.org|UsineNouvelleCrawler|antibot|netresearchserver|speedy|fluffy|bibnum.bnf|findlink|msrbot|panscient|yacybot|AISearchBot|IOI|ips-agent|tagoobot|MJ12bot|dotbot|woriobot|yanga|buzzbot|mlbot|yandexbot|purebot|Linguee Bot|Voyager|CyberPatrol|voilabot|baiduspider|citeseerxbot|spbot|twengabot|postrank|turnitinbot|scribdbot|page2rss|sitebot|linkdex|Adidxbot|blekkobot|ezooms|dotbot|Mail.RU_Bot|discobot|heritrix|findthatfile|europarchive.org|NerdByNature.Bot|sistrix crawler|ahrefsbot|Aboundex|domaincrawler|wbsearchbot|summify|ccbot|edisterbot|seznambot|ec2linkfinder|gslfbot|aihitbot|intelium_bot|facebookexternalhit|yeti|RetrevoPageAnalyzer|lb-spider|sogou|lssbot|careerbot|wotbox|wocbot|ichiro|DuckDuckBot|lssrocketcrawler|drupact|webcompanycrawler|acoonbot|openindexspider|gnam gnam spider|web-archive-net.com.bot|backlinkcrawler|coccoc|integromedb|content crawler spider|toplistbot|seokicks-robot|it2media-domain-crawler|ip-web-crawler.com|siteexplorer.info|elisabot|proximic|changedetection|blexbot|arabot|WeSEE:Search|niki-bot|CrystalSemanticsBot|rogerbot|360Spider|psbot|InterfaxScanBot|Lipperhey SEO Service|CC Metadata Scaper|g00g1e.net|GrapeshotCrawler|urlappendbot|brainobot|fr-crawler|binlar|SimpleCrawler|Livelapbot|Twitterbot|cXensebot|smtbot|bnf.fr_bot|A6-Indexer|ADmantX|Facebot|Twitterbot|OrangeBot|memorybot|AdvBot|MegaIndex|SemanticScholarBot|ltx71|nerdybot|xovibot|BUbiNG|Qwantify|archive.org_bot|Applebot|TweetmemeBot|crawler4j|findxbot|SemrushBot|yoozBot|lipperhey|y!j-asr|Domain Re-Animator Bot|AddThis)\";\n",
       "\n",
       "\tvar re = new RegExp(botPattern, 'i');\n",
       "\n",
       "\tif (re.test(navigator.userAgent)) {\n",
       "\t\t\n",
       "\t} else {\n",
       "\t\t\n",
       "\t\t//Check to see whether they are running an ad blocker\n",
       "\t\tif(document.getElementById('12mORwMnaEkJXlxz')){\n",
       "\t\t  var ad_blocker = 'N';\n",
       "\t\t} else {\n",
       "\t\t  var ad_blocker = 'Y';\n",
       "\t\t}\n",
       "\n",
       "\t\t$.post('https://api.ipstack.com/check?access_key=14fe63e83d5cfefa0b3d4cec498479ba&output=json&fields=ip,continent_name,country_name,region_name,city', \n",
       "\t\tfunction(ip_data){\n",
       "\t\t\t\n",
       "\t\t\t$.post('https://www.macrotrends.net/assets/php/page_view_tracking.php', {ip: ip_data.ip,continent: ip_data.continent_name, country: ip_data.country_name, state: ip_data.region_name, city: ip_data.city, screen_width: screen.width, ads: ad_blocker, page_type: 'stock'}, \n",
       "\t\t\t\tfunction(data){\n",
       "\t\t\t\t\t/*\t\t\t\t\t\n",
       "\t\t\t\t\tif(data % 20 === 0) {\n",
       "\t\t\t\t\t\t\n",
       "\t\t\t\t\t\t//$('#contribute_modal').modal();\n",
       "\t\t\t\t\t\t\n",
       "\t\t\t\t\t}\n",
       "\t\t\t\t\t*/\n",
       "\t\t\t\t});\n",
       "\t\t\n",
       "\t\t});\n",
       "\n",
       "\n",
       "\t}\n",
       "\t\n",
       "\n",
       "});\n",
       "\n",
       "\n",
       "$.post('https://api.ipstack.com/check?access_key=14fe63e83d5cfefa0b3d4cec498479ba&output=json&fields=ip,continent_name,country_name,region_name,city', \n",
       "function(ip_data){\n",
       "\t\n",
       "\t$(\".contribute_user_id\").val(ip_data.ip);\n",
       "\t\n",
       "});\n",
       "\n",
       "$( \".donate_buttons\" ).click(function() {\n",
       "  \n",
       "\tvar payment = $(this).attr(\"value\");\n",
       "\n",
       "\t$.post('https://api.ipstack.com/check?access_key=14fe63e83d5cfefa0b3d4cec498479ba&output=json&fields=ip,continent_name,country_name,region_name,city', \n",
       "\t\tfunction(ip_data){\n",
       "\t\t\t\t\t\n",
       "\t\t$.post('https://www.macrotrends.net/assets/php/page_view_tracking.php', {ip: ip_data.ip, paid: payment}); \n",
       "\t\n",
       "\t});\n",
       "\t\t \n",
       "});\n",
       "\n",
       "</script>\n",
       "\n",
       "-->\n",
       "<script type=\"text/javascript\">\n",
       "var clicky_site_ids = clicky_site_ids || [];\n",
       "clicky_site_ids.push(100827248);\n",
       "(function() {\n",
       "  var s = document.createElement('script');\n",
       "  s.type = 'text/javascript';\n",
       "  s.async = true;\n",
       "  s.src = '//static.getclicky.com/js';\n",
       "  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );\n",
       "})();\n",
       "</script>\n",
       "<noscript><p><img alt=\"Clicky\" height=\"1\" src=\"//in.getclicky.com/100827248ns.gif\" width=\"1\"/></p></noscript>\n",
       "<!-- This site is converting visitors into subscribers and customers with OptinMonster - https://optinmonster.com -->\n",
       "<!-- <script type=\"text/javascript\" src=\"https://a.omappapi.com/app/js/api.min.js\" data-account=\"6392\" data-user=\"15772\" async></script> -->\n",
       "<!-- / OptinMonster -->\n",
       "</body>\n",
       "</html>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "df4d112a",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'find_all'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 12\u001b[0m\n\u001b[1;32m      8\u001b[0m soup \u001b[38;5;241m=\u001b[39m BeautifulSoup(response\u001b[38;5;241m.\u001b[39mcontent, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhtml.parser\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     10\u001b[0m table \u001b[38;5;241m=\u001b[39m soup\u001b[38;5;241m.\u001b[39mfind(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtable\u001b[39m\u001b[38;5;124m\"\u001b[39m, class_\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtable table-striped table-bordered table-hover\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 12\u001b[0m rows \u001b[38;5;241m=\u001b[39m \u001b[43mtable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfind_all\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtr\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     14\u001b[0m tesla_revenue \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m row \u001b[38;5;129;01min\u001b[39;00m rows:\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'find_all'"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "url = \"https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue\"\n",
    "\n",
    "response = requests.get(url)\n",
    "\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n",
    "\n",
    "table = soup.find(\"table\", class_=\"table table-striped table-bordered table-hover\")\n",
    "\n",
    "rows = table.find_all(\"tr\")\n",
    "\n",
    "tesla_revenue = []\n",
    "\n",
    "for row in rows:\n",
    "    cells = row.find_all(\"td\")\n",
    "    date = cells[0].text\n",
    "    revenue = cells[1].text.replace(\",\", \"\").replace(\"$\", \"\")\n",
    "    tesla_revenue.append([date, revenue])\n",
    "\n",
    "tesla_revenue_df = pd.DataFrame(tesla_revenue, columns=[\"Date\", \"Revenue\"])\n",
    "\n",
    "print(tesla_revenue_df.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6623a344",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8aecddb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://finance.yahoo.com/quote/TSLA/financials?p=TSLA'\n",
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.text, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "32448545",
   "metadata": {},
   "outputs": [],
   "source": [
    "table = soup.find_all('table')[0]\n",
    "headers = []\n",
    "for th in table.find_all('th'):\n",
    "    headers.append(th.text.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f9b698a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = []\n",
    "for tr in table.find_all('tr'):\n",
    "    row = []\n",
    "    for td in tr.find_all('td'):\n",
    "        row.append(td.text.strip())\n",
    "    if row:\n",
    "        data.append(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0abe2f4e",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "0 columns passed, passed data had 1 columns",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:969\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    968\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m \u001b[43m_validate_or_indexify_columns\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcontents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:1017\u001b[0m, in \u001b[0;36m_validate_or_indexify_columns\u001b[0;34m(content, columns)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_mi_list \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(columns) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(content):  \u001b[38;5;66;03m# pragma: no cover\u001b[39;00m\n\u001b[1;32m   1016\u001b[0m     \u001b[38;5;66;03m# caller's responsibility to check for this...\u001b[39;00m\n\u001b[0;32m-> 1017\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m(\n\u001b[1;32m   1018\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(columns)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns passed, passed data had \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1019\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(content)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1020\u001b[0m     )\n\u001b[1;32m   1021\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_mi_list:\n\u001b[1;32m   1022\u001b[0m \n\u001b[1;32m   1023\u001b[0m     \u001b[38;5;66;03m# check if nested list column, length of each sub-list should be equal\u001b[39;00m\n",
      "\u001b[0;31mAssertionError\u001b[0m: 0 columns passed, passed data had 1 columns",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[18], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m tesla_revenue \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py:745\u001b[0m, in \u001b[0;36mDataFrame.__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    743\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    744\u001b[0m         columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[0;32m--> 745\u001b[0m     arrays, columns, index \u001b[38;5;241m=\u001b[39m \u001b[43mnested_data_to_arrays\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    746\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# error: Argument 3 to \"nested_data_to_arrays\" has incompatible\u001b[39;49;00m\n\u001b[1;32m    747\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# type \"Optional[Collection[Any]]\"; expected \"Optional[Index]\"\u001b[39;49;00m\n\u001b[1;32m    748\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    749\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    750\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[arg-type]\u001b[39;49;00m\n\u001b[1;32m    751\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    752\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    753\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m arrays_to_mgr(\n\u001b[1;32m    754\u001b[0m         arrays,\n\u001b[1;32m    755\u001b[0m         columns,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    758\u001b[0m         typ\u001b[38;5;241m=\u001b[39mmanager,\n\u001b[1;32m    759\u001b[0m     )\n\u001b[1;32m    760\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:510\u001b[0m, in \u001b[0;36mnested_data_to_arrays\u001b[0;34m(data, columns, index, dtype)\u001b[0m\n\u001b[1;32m    507\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_named_tuple(data[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;129;01mand\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    508\u001b[0m     columns \u001b[38;5;241m=\u001b[39m ensure_index(data[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39m_fields)\n\u001b[0;32m--> 510\u001b[0m arrays, columns \u001b[38;5;241m=\u001b[39m \u001b[43mto_arrays\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    511\u001b[0m columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[1;32m    513\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m index \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:875\u001b[0m, in \u001b[0;36mto_arrays\u001b[0;34m(data, columns, dtype)\u001b[0m\n\u001b[1;32m    872\u001b[0m     data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mtuple\u001b[39m(x) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m data]\n\u001b[1;32m    873\u001b[0m     arr \u001b[38;5;241m=\u001b[39m _list_to_arrays(data)\n\u001b[0;32m--> 875\u001b[0m content, columns \u001b[38;5;241m=\u001b[39m \u001b[43m_finalize_columns_and_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m content, columns\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:972\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m _validate_or_indexify_columns(contents, columns)\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n\u001b[0;32m--> 972\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m    974\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(contents) \u001b[38;5;129;01mand\u001b[39;00m contents[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mobject_:\n\u001b[1;32m    975\u001b[0m     contents \u001b[38;5;241m=\u001b[39m _convert_object_array(contents, dtype\u001b[38;5;241m=\u001b[39mdtype)\n",
      "\u001b[0;31mValueError\u001b[0m: 0 columns passed, passed data had 1 columns"
     ]
    }
   ],
   "source": [
    "tesla_revenue = pd.DataFrame(data, columns=headers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6ce1c925",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "url = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'\n",
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.text, 'html.parser')\n",
    "\n",
    "# Find the table element that contains the revenue data\n",
    "table = soup.find_all('table')[0]\n",
    "\n",
    "# # Extract the column names from the table header row\n",
    "# headers = []\n",
    "# for th in table.find_all('th'):\n",
    "#     headers.append(th.text.strip())\n",
    "\n",
    "# # Extract the revenue data from the table rows\n",
    "# data = []\n",
    "# rows = table.find_all('tr')\n",
    "# for row in rows[1:]:  # Skip the first row as it contains the column names\n",
    "#     cells = row.find_all('td')\n",
    "#     row_data = [cell.text.strip() for cell in cells]\n",
    "#     data.append(row_data)\n",
    "\n",
    "# # Create a dataframe using the extracted data and column names\n",
    "# tesla_revenue = pd.DataFrame(data, columns=headers)\n",
    "\n",
    "# # Display the last five rows of the dataframe\n",
    "# print(tesla_revenue.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6b7d8c1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<table class=\"historical_data_table table\">\n",
      "<thead>\n",
      "<tr>\n",
      "<th colspan=\"2\" style=\"text-align:center\">Tesla Annual Revenue<br/><span style=\"font-size:14px;\">(Millions of US $)</span></th>\n",
      "</tr>\n",
      "</thead>\n",
      "<tbody>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2022</td>\n",
      "<td style=\"text-align:center\">$81,462</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2021</td>\n",
      "<td style=\"text-align:center\">$53,823</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2020</td>\n",
      "<td style=\"text-align:center\">$31,536</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2019</td>\n",
      "<td style=\"text-align:center\">$24,578</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2018</td>\n",
      "<td style=\"text-align:center\">$21,461</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2017</td>\n",
      "<td style=\"text-align:center\">$11,759</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2016</td>\n",
      "<td style=\"text-align:center\">$7,000</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2015</td>\n",
      "<td style=\"text-align:center\">$4,046</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2014</td>\n",
      "<td style=\"text-align:center\">$3,198</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2013</td>\n",
      "<td style=\"text-align:center\">$2,013</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2012</td>\n",
      "<td style=\"text-align:center\">$413</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2011</td>\n",
      "<td style=\"text-align:center\">$204</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2010</td>\n",
      "<td style=\"text-align:center\">$117</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2009</td>\n",
      "<td style=\"text-align:center\">$112</td>\n",
      "</tr>\n",
      "</tbody>\n",
      "</table>\n"
     ]
    }
   ],
   "source": [
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "25c39155",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "1 columns passed, passed data had 2 columns",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:969\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    968\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m \u001b[43m_validate_or_indexify_columns\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcontents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:1017\u001b[0m, in \u001b[0;36m_validate_or_indexify_columns\u001b[0;34m(content, columns)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_mi_list \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(columns) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(content):  \u001b[38;5;66;03m# pragma: no cover\u001b[39;00m\n\u001b[1;32m   1016\u001b[0m     \u001b[38;5;66;03m# caller's responsibility to check for this...\u001b[39;00m\n\u001b[0;32m-> 1017\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m(\n\u001b[1;32m   1018\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(columns)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns passed, passed data had \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1019\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(content)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1020\u001b[0m     )\n\u001b[1;32m   1021\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_mi_list:\n\u001b[1;32m   1022\u001b[0m \n\u001b[1;32m   1023\u001b[0m     \u001b[38;5;66;03m# check if nested list column, length of each sub-list should be equal\u001b[39;00m\n",
      "\u001b[0;31mAssertionError\u001b[0m: 1 columns passed, passed data had 2 columns",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[30], line 17\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m row \u001b[38;5;129;01min\u001b[39;00m table\u001b[38;5;241m.\u001b[39mfind_all(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtr\u001b[39m\u001b[38;5;124m'\u001b[39m)[\u001b[38;5;241m1\u001b[39m:]:\n\u001b[1;32m     15\u001b[0m     rows\u001b[38;5;241m.\u001b[39mappend([td\u001b[38;5;241m.\u001b[39mtext\u001b[38;5;241m.\u001b[39mstrip() \u001b[38;5;28;01mfor\u001b[39;00m td \u001b[38;5;129;01min\u001b[39;00m row\u001b[38;5;241m.\u001b[39mfind_all(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtd\u001b[39m\u001b[38;5;124m'\u001b[39m)])\n\u001b[0;32m---> 17\u001b[0m tesla_revenue \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrows\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28mprint\u001b[39m(tesla_revenue\u001b[38;5;241m.\u001b[39mtail())\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py:745\u001b[0m, in \u001b[0;36mDataFrame.__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    743\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    744\u001b[0m         columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[0;32m--> 745\u001b[0m     arrays, columns, index \u001b[38;5;241m=\u001b[39m \u001b[43mnested_data_to_arrays\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    746\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# error: Argument 3 to \"nested_data_to_arrays\" has incompatible\u001b[39;49;00m\n\u001b[1;32m    747\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# type \"Optional[Collection[Any]]\"; expected \"Optional[Index]\"\u001b[39;49;00m\n\u001b[1;32m    748\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    749\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    750\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[arg-type]\u001b[39;49;00m\n\u001b[1;32m    751\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    752\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    753\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m arrays_to_mgr(\n\u001b[1;32m    754\u001b[0m         arrays,\n\u001b[1;32m    755\u001b[0m         columns,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    758\u001b[0m         typ\u001b[38;5;241m=\u001b[39mmanager,\n\u001b[1;32m    759\u001b[0m     )\n\u001b[1;32m    760\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:510\u001b[0m, in \u001b[0;36mnested_data_to_arrays\u001b[0;34m(data, columns, index, dtype)\u001b[0m\n\u001b[1;32m    507\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_named_tuple(data[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;129;01mand\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    508\u001b[0m     columns \u001b[38;5;241m=\u001b[39m ensure_index(data[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39m_fields)\n\u001b[0;32m--> 510\u001b[0m arrays, columns \u001b[38;5;241m=\u001b[39m \u001b[43mto_arrays\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    511\u001b[0m columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[1;32m    513\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m index \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:875\u001b[0m, in \u001b[0;36mto_arrays\u001b[0;34m(data, columns, dtype)\u001b[0m\n\u001b[1;32m    872\u001b[0m     data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mtuple\u001b[39m(x) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m data]\n\u001b[1;32m    873\u001b[0m     arr \u001b[38;5;241m=\u001b[39m _list_to_arrays(data)\n\u001b[0;32m--> 875\u001b[0m content, columns \u001b[38;5;241m=\u001b[39m \u001b[43m_finalize_columns_and_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m content, columns\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:972\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m _validate_or_indexify_columns(contents, columns)\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n\u001b[0;32m--> 972\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m    974\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(contents) \u001b[38;5;129;01mand\u001b[39;00m contents[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mobject_:\n\u001b[1;32m    975\u001b[0m     contents \u001b[38;5;241m=\u001b[39m _convert_object_array(contents, dtype\u001b[38;5;241m=\u001b[39mdtype)\n",
      "\u001b[0;31mValueError\u001b[0m: 1 columns passed, passed data had 2 columns"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "url = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'\n",
    "response = requests.get(url)\n",
    "\n",
    "soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "table = soup.find('table', class_='historical_data_table')\n",
    "\n",
    "headers = [th.text.strip() for th in table.find_all('th')]\n",
    "rows = []\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    rows.append([td.text.strip() for td in row.find_all('td')])\n",
    "\n",
    "tesla_revenue = pd.DataFrame(rows, columns=headers)\n",
    "print(tesla_revenue.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c84486ba",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "1 columns passed, passed data had 2 columns",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:969\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    968\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m \u001b[43m_validate_or_indexify_columns\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcontents\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:1017\u001b[0m, in \u001b[0;36m_validate_or_indexify_columns\u001b[0;34m(content, columns)\u001b[0m\n\u001b[1;32m   1015\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_mi_list \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(columns) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(content):  \u001b[38;5;66;03m# pragma: no cover\u001b[39;00m\n\u001b[1;32m   1016\u001b[0m     \u001b[38;5;66;03m# caller's responsibility to check for this...\u001b[39;00m\n\u001b[0;32m-> 1017\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m(\n\u001b[1;32m   1018\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(columns)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns passed, passed data had \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1019\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(content)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m columns\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1020\u001b[0m     )\n\u001b[1;32m   1021\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_mi_list:\n\u001b[1;32m   1022\u001b[0m \n\u001b[1;32m   1023\u001b[0m     \u001b[38;5;66;03m# check if nested list column, length of each sub-list should be equal\u001b[39;00m\n",
      "\u001b[0;31mAssertionError\u001b[0m: 1 columns passed, passed data had 2 columns",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[32], line 17\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m row \u001b[38;5;129;01min\u001b[39;00m table\u001b[38;5;241m.\u001b[39mfind_all(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtr\u001b[39m\u001b[38;5;124m'\u001b[39m)[\u001b[38;5;241m1\u001b[39m:]:\n\u001b[1;32m     15\u001b[0m     rows\u001b[38;5;241m.\u001b[39mappend([td\u001b[38;5;241m.\u001b[39mtext\u001b[38;5;241m.\u001b[39mstrip() \u001b[38;5;28;01mfor\u001b[39;00m td \u001b[38;5;129;01min\u001b[39;00m row\u001b[38;5;241m.\u001b[39mfind_all(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtd\u001b[39m\u001b[38;5;124m'\u001b[39m)])\n\u001b[0;32m---> 17\u001b[0m tesla_revenue \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDataFrame\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrows\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     18\u001b[0m \u001b[38;5;28mprint\u001b[39m(tesla_revenue\u001b[38;5;241m.\u001b[39mtail())\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py:745\u001b[0m, in \u001b[0;36mDataFrame.__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    743\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    744\u001b[0m         columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[0;32m--> 745\u001b[0m     arrays, columns, index \u001b[38;5;241m=\u001b[39m \u001b[43mnested_data_to_arrays\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    746\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# error: Argument 3 to \"nested_data_to_arrays\" has incompatible\u001b[39;49;00m\n\u001b[1;32m    747\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;66;43;03m# type \"Optional[Collection[Any]]\"; expected \"Optional[Index]\"\u001b[39;49;00m\n\u001b[1;32m    748\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    749\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    750\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[arg-type]\u001b[39;49;00m\n\u001b[1;32m    751\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    752\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    753\u001b[0m     mgr \u001b[38;5;241m=\u001b[39m arrays_to_mgr(\n\u001b[1;32m    754\u001b[0m         arrays,\n\u001b[1;32m    755\u001b[0m         columns,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    758\u001b[0m         typ\u001b[38;5;241m=\u001b[39mmanager,\n\u001b[1;32m    759\u001b[0m     )\n\u001b[1;32m    760\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:510\u001b[0m, in \u001b[0;36mnested_data_to_arrays\u001b[0;34m(data, columns, index, dtype)\u001b[0m\n\u001b[1;32m    507\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_named_tuple(data[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;129;01mand\u001b[39;00m columns \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    508\u001b[0m     columns \u001b[38;5;241m=\u001b[39m ensure_index(data[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39m_fields)\n\u001b[0;32m--> 510\u001b[0m arrays, columns \u001b[38;5;241m=\u001b[39m \u001b[43mto_arrays\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    511\u001b[0m columns \u001b[38;5;241m=\u001b[39m ensure_index(columns)\n\u001b[1;32m    513\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m index \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:875\u001b[0m, in \u001b[0;36mto_arrays\u001b[0;34m(data, columns, dtype)\u001b[0m\n\u001b[1;32m    872\u001b[0m     data \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mtuple\u001b[39m(x) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m data]\n\u001b[1;32m    873\u001b[0m     arr \u001b[38;5;241m=\u001b[39m _list_to_arrays(data)\n\u001b[0;32m--> 875\u001b[0m content, columns \u001b[38;5;241m=\u001b[39m \u001b[43m_finalize_columns_and_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43marr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m content, columns\n",
      "File \u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py:972\u001b[0m, in \u001b[0;36m_finalize_columns_and_data\u001b[0;34m(content, columns, dtype)\u001b[0m\n\u001b[1;32m    969\u001b[0m     columns \u001b[38;5;241m=\u001b[39m _validate_or_indexify_columns(contents, columns)\n\u001b[1;32m    970\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mAssertionError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m    971\u001b[0m     \u001b[38;5;66;03m# GH#26429 do not raise user-facing AssertionError\u001b[39;00m\n\u001b[0;32m--> 972\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(err) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m    974\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(contents) \u001b[38;5;129;01mand\u001b[39;00m contents[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39mobject_:\n\u001b[1;32m    975\u001b[0m     contents \u001b[38;5;241m=\u001b[39m _convert_object_array(contents, dtype\u001b[38;5;241m=\u001b[39mdtype)\n",
      "\u001b[0;31mValueError\u001b[0m: 1 columns passed, passed data had 2 columns"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "url = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'\n",
    "response = requests.get(url)\n",
    "\n",
    "soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "table = soup.find('table', class_='table')\n",
    "\n",
    "headers = [th.text.strip() for th in table.find_all('th')]\n",
    "rows = []\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    rows.append([td.text.strip() for td in row.find_all('td')])\n",
    "\n",
    "tesla_revenue = pd.DataFrame(rows, columns=headers)\n",
    "print(tesla_revenue.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8d70e752",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Year Revenue (Millions of US $)\n",
      "9   2013                     $2,013\n",
      "10  2012                       $413\n",
      "11  2011                       $204\n",
      "12  2010                       $117\n",
      "13  2009                       $112\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "url = 'https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue'\n",
    "response = requests.get(url)\n",
    "\n",
    "soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "table = soup.find('table', class_='historical_data_table')\n",
    "\n",
    "headers = ['Year', 'Revenue (Millions of US $)']\n",
    "rows = []\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    data = [td.text.strip() for td in row.find_all('td')]\n",
    "    rows.append(data)\n",
    "\n",
    "tesla_revenue = pd.DataFrame(rows, columns=headers)\n",
    "print(tesla_revenue.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6e6b577b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                       Date      Open      High       Low     Close  \\\n",
      "0 2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667   \n",
      "1 2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667   \n",
      "2 2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000   \n",
      "3 2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   \n",
      "4 2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000   \n",
      "\n",
      "      Volume  Dividends  Stock Splits  \n",
      "0  281494500        0.0           0.0  \n",
      "1  257806500        0.0           0.0  \n",
      "2  123282000        0.0           0.0  \n",
      "3   77097000        0.0           0.0  \n",
      "4  103003500        0.0           0.0  \n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "\n",
    "tesla = yf.Ticker(\"TSLA\")\n",
    "tesla_data = tesla.history(period=\"max\")\n",
    "\n",
    "tesla_data.reset_index(inplace=True)\n",
    "tesla_data.to_csv(\"tesla_data.csv\")\n",
    "\n",
    "print(tesla_data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e143d4c4",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'find_all'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[35], line 12\u001b[0m\n\u001b[1;32m      8\u001b[0m soup \u001b[38;5;241m=\u001b[39m BeautifulSoup(response\u001b[38;5;241m.\u001b[39mcontent, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhtml.parser\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     10\u001b[0m table \u001b[38;5;241m=\u001b[39m soup\u001b[38;5;241m.\u001b[39mfind(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtable\u001b[39m\u001b[38;5;124m\"\u001b[39m, class_\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtable table-striped table-bordered table-hover\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 12\u001b[0m rows \u001b[38;5;241m=\u001b[39m \u001b[43mtable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfind_all\u001b[49m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtr\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     14\u001b[0m gme_revenue \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m row \u001b[38;5;129;01min\u001b[39;00m rows:\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'find_all'"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "url = \"https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue\"\n",
    "\n",
    "response = requests.get(url)\n",
    "\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n",
    "\n",
    "\n",
    "\n",
    "rows = table.find_all(\"tr\")\n",
    "\n",
    "gme_revenue = []\n",
    "\n",
    "for row in rows:\n",
    "    cells = row.find_all(\"td\")\n",
    "    date = cells[0].text\n",
    "    revenue = cells[1].text.replace(\",\", \"\").replace(\"$\", \"\")\n",
    "    gme_revenue.append([date, revenue])\n",
    "\n",
    "gme_revenue_df = pd.DataFrame(gme_revenue, columns=[\"Date\", \"Revenue\"])\n",
    "\n",
    "print(gme_revenue_df.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c6161849",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Year Revenue (Millions of US $)\n",
      "10  2013                     $8,887\n",
      "11  2012                     $9,551\n",
      "12  2011                     $9,474\n",
      "13  2010                     $9,078\n",
      "14  2009                     $8,806\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "\n",
    "url = 'https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue'\n",
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "table = soup.find('table', class_='historical_data_table')\n",
    "\n",
    "headers = ['Year', 'Revenue (Millions of US $)']\n",
    "rows = []\n",
    "for row in table.find_all('tr')[1:]:\n",
    "    data = [td.text.strip() for td in row.find_all('td')]\n",
    "    rows.append(data)\n",
    "\n",
    "tesla_revenue = pd.DataFrame(rows, columns=headers)\n",
    "print(tesla_revenue.tail())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "12eded0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<table class=\"historical_data_table table\">\n",
      "<thead>\n",
      "<tr>\n",
      "<th colspan=\"2\" style=\"text-align:center\">GameStop Annual Revenue<br/><span style=\"font-size:14px;\">(Millions of US $)</span></th>\n",
      "</tr>\n",
      "</thead>\n",
      "<tbody>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2023</td>\n",
      "<td style=\"text-align:center\">$5,927</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2022</td>\n",
      "<td style=\"text-align:center\">$6,011</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2021</td>\n",
      "<td style=\"text-align:center\">$5,090</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2020</td>\n",
      "<td style=\"text-align:center\">$6,466</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2019</td>\n",
      "<td style=\"text-align:center\">$8,285</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2018</td>\n",
      "<td style=\"text-align:center\">$8,547</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2017</td>\n",
      "<td style=\"text-align:center\">$7,965</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2016</td>\n",
      "<td style=\"text-align:center\">$9,364</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2015</td>\n",
      "<td style=\"text-align:center\">$9,296</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2014</td>\n",
      "<td style=\"text-align:center\">$9,040</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2013</td>\n",
      "<td style=\"text-align:center\">$8,887</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2012</td>\n",
      "<td style=\"text-align:center\">$9,551</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2011</td>\n",
      "<td style=\"text-align:center\">$9,474</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2010</td>\n",
      "<td style=\"text-align:center\">$9,078</td>\n",
      "</tr>\n",
      "<tr>\n",
      "<td style=\"text-align:center\">2009</td>\n",
      "<td style=\"text-align:center\">$8,806</td>\n",
      "</tr>\n",
      "</tbody>\n",
      "</table>\n"
     ]
    }
   ],
   "source": [
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d921734f",
   "metadata": {},
   "outputs": [],
   "source": [
    "gre = yf.Ticker(\"GME\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2c573d80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Unnamed: 0                       Date      Open      High       Low  \\\n",
      "0           0  2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333   \n",
      "1           1  2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333   \n",
      "2           2  2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333   \n",
      "3           3  2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333   \n",
      "4           4  2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333   \n",
      "\n",
      "      Close     Volume  Dividends  Stock Splits  \n",
      "0  1.592667  281494500        0.0           0.0  \n",
      "1  1.588667  257806500        0.0           0.0  \n",
      "2  1.464000  123282000        0.0           0.0  \n",
      "3  1.280000   77097000        0.0           0.0  \n",
      "4  1.074000  103003500        0.0           0.0  \n"
     ]
    }
   ],
   "source": [
    "gre_data = gre.history(period=\"max\")\n",
    "gre_data.reset_index(inplace=True)\n",
    "gre_data.to_csv(\"gre_data.csv\")\n",
    "print(tesla_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "0e865c48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def make_graph(data, title):\n",
    "  plt.plot(data[\"Date\"], data[\"Close\"])\n",
    "  plt.title(title)\n",
    "  plt.show()\n",
    "\n",
    "gme_data = pd.read_csv(\"gre_data.csv\")\n",
    "\n",
    "make_graph(gme_data, \"GameStop Stock Price\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57657f4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
